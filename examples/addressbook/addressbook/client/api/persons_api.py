# coding: utf-8

"""
    Example person and addressbook API

    Example person and addressbook API  # noqa: E501

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError
from typing_extensions import Annotated
from typing import overload, Optional, Union, Awaitable

from pydantic import Field, StrictInt, StrictStr

from typing import List, Optional

from addressbook.client.models.create_person import CreatePerson
from addressbook.client.models.person import Person
from addressbook.client.models.update_person import UpdatePerson

from addressbook.client.api_client import ApiClient
from addressbook.client.api_response import ApiResponse
from addressbook.client.exceptions import ApiTypeError, ApiValueError  # noqa: F401


class PersonsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @overload
    async def persons_get(
        self,
        last_name: Annotated[Optional[StrictStr], Field(description="Filter by last name")] = None,
        limit: Annotated[
            Optional[StrictInt], Field(description="Limit the number of responses back")
        ] = None,
        offset: Annotated[
            Optional[StrictInt], Field(description="The offset to start returning resources")
        ] = None,
        **kwargs,
    ) -> List[Person]:  # noqa: E501
        ...

    @overload
    def persons_get(
        self,
        last_name: Annotated[Optional[StrictStr], Field(description="Filter by last name")] = None,
        limit: Annotated[
            Optional[StrictInt], Field(description="Limit the number of responses back")
        ] = None,
        offset: Annotated[
            Optional[StrictInt], Field(description="The offset to start returning resources")
        ] = None,
        async_req: Optional[bool] = True,
        **kwargs,
    ) -> List[Person]:  # noqa: E501
        ...

    @validate_arguments
    def persons_get(
        self,
        last_name: Annotated[Optional[StrictStr], Field(description="Filter by last name")] = None,
        limit: Annotated[
            Optional[StrictInt], Field(description="Limit the number of responses back")
        ] = None,
        offset: Annotated[
            Optional[StrictInt], Field(description="The offset to start returning resources")
        ] = None,
        async_req: Optional[bool] = None,
        **kwargs,
    ) -> Union[List[Person], Awaitable[List[Person]]]:  # noqa: E501
        """persons_get  # noqa: E501

        List all persons in this collection  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.persons_get(last_name, limit, offset, async_req=True)
        >>> result = thread.get()

        :param last_name: Filter by last name
        :type last_name: str
        :param limit: Limit the number of responses back
        :type limit: int
        :param offset: The offset to start returning resources
        :type offset: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[Person]
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            raise ValueError(
                "Error! Please call the persons_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            )
        if async_req is not None:
            kwargs["async_req"] = async_req
        return self.persons_get_with_http_info(last_name, limit, offset, **kwargs)  # noqa: E501

    @validate_arguments
    def persons_get_with_http_info(
        self,
        last_name: Annotated[Optional[StrictStr], Field(description="Filter by last name")] = None,
        limit: Annotated[
            Optional[StrictInt], Field(description="Limit the number of responses back")
        ] = None,
        offset: Annotated[
            Optional[StrictInt], Field(description="The offset to start returning resources")
        ] = None,
        **kwargs,
    ) -> ApiResponse:  # noqa: E501
        """persons_get  # noqa: E501

        List all persons in this collection  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.persons_get_with_http_info(last_name, limit, offset, async_req=True)
        >>> result = thread.get()

        :param last_name: Filter by last name
        :type last_name: str
        :param limit: Limit the number of responses back
        :type limit: int
        :param offset: The offset to start returning resources
        :type offset: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[Person], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["last_name", "limit", "offset"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'" " to method persons_get" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get("last_name") is not None:  # noqa: E501
            _query_params.append(("last_name", _params["last_name"]))

        if _params.get("limit") is not None:  # noqa: E501
            _query_params.append(("limit", _params["limit"]))

        if _params.get("offset") is not None:  # noqa: E501
            _query_params.append(("offset", _params["offset"]))

        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # authentication setting
        _auth_settings = ["bearer_auth"]  # noqa: E501

        _response_types_map = {
            "200": "List[Person]",
        }

        return self.api_client.call_api(
            "/persons",
            "GET",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @overload
    async def persons_post(
        self,
        create_person: Annotated[
            CreatePerson, Field(..., description="The request body for /persons")
        ],
        limit: Annotated[
            Optional[StrictInt], Field(description="Limit the number of responses back")
        ] = None,
        offset: Annotated[
            Optional[StrictInt], Field(description="The offset to start returning resources")
        ] = None,
        **kwargs,
    ) -> CreatePerson:  # noqa: E501
        ...

    @overload
    def persons_post(
        self,
        create_person: Annotated[
            CreatePerson, Field(..., description="The request body for /persons")
        ],
        limit: Annotated[
            Optional[StrictInt], Field(description="Limit the number of responses back")
        ] = None,
        offset: Annotated[
            Optional[StrictInt], Field(description="The offset to start returning resources")
        ] = None,
        async_req: Optional[bool] = True,
        **kwargs,
    ) -> CreatePerson:  # noqa: E501
        ...

    @validate_arguments
    def persons_post(
        self,
        create_person: Annotated[
            CreatePerson, Field(..., description="The request body for /persons")
        ],
        limit: Annotated[
            Optional[StrictInt], Field(description="Limit the number of responses back")
        ] = None,
        offset: Annotated[
            Optional[StrictInt], Field(description="The offset to start returning resources")
        ] = None,
        async_req: Optional[bool] = None,
        **kwargs,
    ) -> Union[CreatePerson, Awaitable[CreatePerson]]:  # noqa: E501
        """persons_post  # noqa: E501

        Create a new person in this collection, a new UUID key will be created  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.persons_post(create_person, limit, offset, async_req=True)
        >>> result = thread.get()

        :param create_person: The request body for /persons (required)
        :type create_person: CreatePerson
        :param limit: Limit the number of responses back
        :type limit: int
        :param offset: The offset to start returning resources
        :type offset: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: CreatePerson
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            raise ValueError(
                "Error! Please call the persons_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            )
        if async_req is not None:
            kwargs["async_req"] = async_req
        return self.persons_post_with_http_info(
            create_person, limit, offset, **kwargs
        )  # noqa: E501

    @validate_arguments
    def persons_post_with_http_info(
        self,
        create_person: Annotated[
            CreatePerson, Field(..., description="The request body for /persons")
        ],
        limit: Annotated[
            Optional[StrictInt], Field(description="Limit the number of responses back")
        ] = None,
        offset: Annotated[
            Optional[StrictInt], Field(description="The offset to start returning resources")
        ] = None,
        **kwargs,
    ) -> ApiResponse:  # noqa: E501
        """persons_post  # noqa: E501

        Create a new person in this collection, a new UUID key will be created  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.persons_post_with_http_info(create_person, limit, offset, async_req=True)
        >>> result = thread.get()

        :param create_person: The request body for /persons (required)
        :type create_person: CreatePerson
        :param limit: Limit the number of responses back
        :type limit: int
        :param offset: The offset to start returning resources
        :type offset: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(CreatePerson, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["create_person", "limit", "offset"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'" " to method persons_post" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get("limit") is not None:  # noqa: E501
            _query_params.append(("limit", _params["limit"]))

        if _params.get("offset") is not None:  # noqa: E501
            _query_params.append(("offset", _params["offset"]))

        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params["create_person"] is not None:
            _body_params = _params["create_person"]

        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get(
            "_content_type", self.api_client.select_header_content_type(["application/json"])
        )
        if _content_types_list:
            _header_params["Content-Type"] = _content_types_list

        # authentication setting
        _auth_settings = ["bearer_auth"]  # noqa: E501

        _response_types_map = {
            "201": "CreatePerson",
        }

        return self.api_client.call_api(
            "/persons",
            "POST",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @overload
    async def persons_uuid_age_delete(self, uuid: StrictStr, **kwargs) -> int:  # noqa: E501
        ...

    @overload
    def persons_uuid_age_delete(
        self, uuid: StrictStr, async_req: Optional[bool] = True, **kwargs
    ) -> int:  # noqa: E501
        ...

    @validate_arguments
    def persons_uuid_age_delete(
        self, uuid: StrictStr, async_req: Optional[bool] = None, **kwargs
    ) -> Union[int, Awaitable[int]]:  # noqa: E501
        """persons_uuid_age_delete  # noqa: E501

        delete operation for /persons/{uuid}/age  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.persons_uuid_age_delete(uuid, async_req=True)
        >>> result = thread.get()

        :param uuid: (required)
        :type uuid: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: int
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            raise ValueError(
                "Error! Please call the persons_uuid_age_delete_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            )
        if async_req is not None:
            kwargs["async_req"] = async_req
        return self.persons_uuid_age_delete_with_http_info(uuid, **kwargs)  # noqa: E501

    @validate_arguments
    def persons_uuid_age_delete_with_http_info(
        self, uuid: StrictStr, **kwargs
    ) -> ApiResponse:  # noqa: E501
        """persons_uuid_age_delete  # noqa: E501

        delete operation for /persons/{uuid}/age  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.persons_uuid_age_delete_with_http_info(uuid, async_req=True)
        >>> result = thread.get()

        :param uuid: (required)
        :type uuid: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(int, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["uuid"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method persons_uuid_age_delete" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["uuid"]:
            _path_params["uuid"] = _params["uuid"]

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # authentication setting
        _auth_settings = ["bearer_auth"]  # noqa: E501

        _response_types_map = {
            "200": "int",
        }

        return self.api_client.call_api(
            "/persons/{uuid}/age",
            "DELETE",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @overload
    async def persons_uuid_age_get(
        self,
        uuid: StrictStr,
        last_name: Annotated[Optional[StrictStr], Field(description="Filter by last name")] = None,
        **kwargs,
    ) -> int:  # noqa: E501
        ...

    @overload
    def persons_uuid_age_get(
        self,
        uuid: StrictStr,
        last_name: Annotated[Optional[StrictStr], Field(description="Filter by last name")] = None,
        async_req: Optional[bool] = True,
        **kwargs,
    ) -> int:  # noqa: E501
        ...

    @validate_arguments
    def persons_uuid_age_get(
        self,
        uuid: StrictStr,
        last_name: Annotated[Optional[StrictStr], Field(description="Filter by last name")] = None,
        async_req: Optional[bool] = None,
        **kwargs,
    ) -> Union[int, Awaitable[int]]:  # noqa: E501
        """persons_uuid_age_get  # noqa: E501

        get operation for /persons/{uuid}/age  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.persons_uuid_age_get(uuid, last_name, async_req=True)
        >>> result = thread.get()

        :param uuid: (required)
        :type uuid: str
        :param last_name: Filter by last name
        :type last_name: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: int
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            raise ValueError(
                "Error! Please call the persons_uuid_age_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            )
        if async_req is not None:
            kwargs["async_req"] = async_req
        return self.persons_uuid_age_get_with_http_info(uuid, last_name, **kwargs)  # noqa: E501

    @validate_arguments
    def persons_uuid_age_get_with_http_info(
        self,
        uuid: StrictStr,
        last_name: Annotated[Optional[StrictStr], Field(description="Filter by last name")] = None,
        **kwargs,
    ) -> ApiResponse:  # noqa: E501
        """persons_uuid_age_get  # noqa: E501

        get operation for /persons/{uuid}/age  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.persons_uuid_age_get_with_http_info(uuid, last_name, async_req=True)
        >>> result = thread.get()

        :param uuid: (required)
        :type uuid: str
        :param last_name: Filter by last name
        :type last_name: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(int, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["uuid", "last_name"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method persons_uuid_age_get" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["uuid"]:
            _path_params["uuid"] = _params["uuid"]

        # process the query parameters
        _query_params = []
        if _params.get("last_name") is not None:  # noqa: E501
            _query_params.append(("last_name", _params["last_name"]))

        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # authentication setting
        _auth_settings = ["bearer_auth"]  # noqa: E501

        _response_types_map = {
            "200": "int",
        }

        return self.api_client.call_api(
            "/persons/{uuid}/age",
            "GET",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @overload
    async def persons_uuid_age_head(self, uuid: StrictStr, **kwargs) -> None:  # noqa: E501
        ...

    @overload
    def persons_uuid_age_head(
        self, uuid: StrictStr, async_req: Optional[bool] = True, **kwargs
    ) -> None:  # noqa: E501
        ...

    @validate_arguments
    def persons_uuid_age_head(
        self, uuid: StrictStr, async_req: Optional[bool] = None, **kwargs
    ) -> Union[None, Awaitable[None]]:  # noqa: E501
        """persons_uuid_age_head  # noqa: E501

        head operation for /persons/{uuid}/age  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.persons_uuid_age_head(uuid, async_req=True)
        >>> result = thread.get()

        :param uuid: (required)
        :type uuid: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            raise ValueError(
                "Error! Please call the persons_uuid_age_head_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            )
        if async_req is not None:
            kwargs["async_req"] = async_req
        return self.persons_uuid_age_head_with_http_info(uuid, **kwargs)  # noqa: E501

    @validate_arguments
    def persons_uuid_age_head_with_http_info(
        self, uuid: StrictStr, **kwargs
    ) -> ApiResponse:  # noqa: E501
        """persons_uuid_age_head  # noqa: E501

        head operation for /persons/{uuid}/age  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.persons_uuid_age_head_with_http_info(uuid, async_req=True)
        >>> result = thread.get()

        :param uuid: (required)
        :type uuid: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = ["uuid"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method persons_uuid_age_head" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["uuid"]:
            _path_params["uuid"] = _params["uuid"]

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = ["bearer_auth"]  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            "/persons/{uuid}/age",
            "HEAD",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @overload
    async def persons_uuid_age_put(
        self,
        uuid: StrictStr,
        body: Annotated[
            StrictInt, Field(..., description="The request body for /persons/{uuid}/age")
        ],
        **kwargs,
    ) -> int:  # noqa: E501
        ...

    @overload
    def persons_uuid_age_put(
        self,
        uuid: StrictStr,
        body: Annotated[
            StrictInt, Field(..., description="The request body for /persons/{uuid}/age")
        ],
        async_req: Optional[bool] = True,
        **kwargs,
    ) -> int:  # noqa: E501
        ...

    @validate_arguments
    def persons_uuid_age_put(
        self,
        uuid: StrictStr,
        body: Annotated[
            StrictInt, Field(..., description="The request body for /persons/{uuid}/age")
        ],
        async_req: Optional[bool] = None,
        **kwargs,
    ) -> Union[int, Awaitable[int]]:  # noqa: E501
        """persons_uuid_age_put  # noqa: E501

        put operation for /persons/{uuid}/age  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.persons_uuid_age_put(uuid, body, async_req=True)
        >>> result = thread.get()

        :param uuid: (required)
        :type uuid: str
        :param body: The request body for /persons/{uuid}/age (required)
        :type body: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: int
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            raise ValueError(
                "Error! Please call the persons_uuid_age_put_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            )
        if async_req is not None:
            kwargs["async_req"] = async_req
        return self.persons_uuid_age_put_with_http_info(uuid, body, **kwargs)  # noqa: E501

    @validate_arguments
    def persons_uuid_age_put_with_http_info(
        self,
        uuid: StrictStr,
        body: Annotated[
            StrictInt, Field(..., description="The request body for /persons/{uuid}/age")
        ],
        **kwargs,
    ) -> ApiResponse:  # noqa: E501
        """persons_uuid_age_put  # noqa: E501

        put operation for /persons/{uuid}/age  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.persons_uuid_age_put_with_http_info(uuid, body, async_req=True)
        >>> result = thread.get()

        :param uuid: (required)
        :type uuid: str
        :param body: The request body for /persons/{uuid}/age (required)
        :type body: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(int, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["uuid", "body"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method persons_uuid_age_put" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["uuid"]:
            _path_params["uuid"] = _params["uuid"]

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params["body"] is not None:
            _body_params = _params["body"]

        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get(
            "_content_type", self.api_client.select_header_content_type(["application/json"])
        )
        if _content_types_list:
            _header_params["Content-Type"] = _content_types_list

        # authentication setting
        _auth_settings = ["bearer_auth"]  # noqa: E501

        _response_types_map = {
            "200": "int",
        }

        return self.api_client.call_api(
            "/persons/{uuid}/age",
            "PUT",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @overload
    async def persons_uuid_delete(self, uuid: StrictStr, **kwargs) -> Person:  # noqa: E501
        ...

    @overload
    def persons_uuid_delete(
        self, uuid: StrictStr, async_req: Optional[bool] = True, **kwargs
    ) -> Person:  # noqa: E501
        ...

    @validate_arguments
    def persons_uuid_delete(
        self, uuid: StrictStr, async_req: Optional[bool] = None, **kwargs
    ) -> Union[Person, Awaitable[Person]]:  # noqa: E501
        """persons_uuid_delete  # noqa: E501

        delete operation for /persons/{uuid}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.persons_uuid_delete(uuid, async_req=True)
        >>> result = thread.get()

        :param uuid: (required)
        :type uuid: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Person
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            raise ValueError(
                "Error! Please call the persons_uuid_delete_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            )
        if async_req is not None:
            kwargs["async_req"] = async_req
        return self.persons_uuid_delete_with_http_info(uuid, **kwargs)  # noqa: E501

    @validate_arguments
    def persons_uuid_delete_with_http_info(
        self, uuid: StrictStr, **kwargs
    ) -> ApiResponse:  # noqa: E501
        """persons_uuid_delete  # noqa: E501

        delete operation for /persons/{uuid}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.persons_uuid_delete_with_http_info(uuid, async_req=True)
        >>> result = thread.get()

        :param uuid: (required)
        :type uuid: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Person, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["uuid"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method persons_uuid_delete" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["uuid"]:
            _path_params["uuid"] = _params["uuid"]

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # authentication setting
        _auth_settings = ["bearer_auth"]  # noqa: E501

        _response_types_map = {
            "200": "Person",
        }

        return self.api_client.call_api(
            "/persons/{uuid}",
            "DELETE",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @overload
    async def persons_uuid_first_name_delete(self, uuid: StrictStr, **kwargs) -> str:  # noqa: E501
        ...

    @overload
    def persons_uuid_first_name_delete(
        self, uuid: StrictStr, async_req: Optional[bool] = True, **kwargs
    ) -> str:  # noqa: E501
        ...

    @validate_arguments
    def persons_uuid_first_name_delete(
        self, uuid: StrictStr, async_req: Optional[bool] = None, **kwargs
    ) -> Union[str, Awaitable[str]]:  # noqa: E501
        """persons_uuid_first_name_delete  # noqa: E501

        delete operation for /persons/{uuid}/first_name  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.persons_uuid_first_name_delete(uuid, async_req=True)
        >>> result = thread.get()

        :param uuid: (required)
        :type uuid: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: str
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            raise ValueError(
                "Error! Please call the persons_uuid_first_name_delete_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            )
        if async_req is not None:
            kwargs["async_req"] = async_req
        return self.persons_uuid_first_name_delete_with_http_info(uuid, **kwargs)  # noqa: E501

    @validate_arguments
    def persons_uuid_first_name_delete_with_http_info(
        self, uuid: StrictStr, **kwargs
    ) -> ApiResponse:  # noqa: E501
        """persons_uuid_first_name_delete  # noqa: E501

        delete operation for /persons/{uuid}/first_name  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.persons_uuid_first_name_delete_with_http_info(uuid, async_req=True)
        >>> result = thread.get()

        :param uuid: (required)
        :type uuid: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(str, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["uuid"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method persons_uuid_first_name_delete" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["uuid"]:
            _path_params["uuid"] = _params["uuid"]

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # authentication setting
        _auth_settings = ["bearer_auth"]  # noqa: E501

        _response_types_map = {
            "200": "str",
        }

        return self.api_client.call_api(
            "/persons/{uuid}/first_name",
            "DELETE",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @overload
    async def persons_uuid_first_name_get(
        self,
        uuid: StrictStr,
        last_name: Annotated[Optional[StrictStr], Field(description="Filter by last name")] = None,
        **kwargs,
    ) -> str:  # noqa: E501
        ...

    @overload
    def persons_uuid_first_name_get(
        self,
        uuid: StrictStr,
        last_name: Annotated[Optional[StrictStr], Field(description="Filter by last name")] = None,
        async_req: Optional[bool] = True,
        **kwargs,
    ) -> str:  # noqa: E501
        ...

    @validate_arguments
    def persons_uuid_first_name_get(
        self,
        uuid: StrictStr,
        last_name: Annotated[Optional[StrictStr], Field(description="Filter by last name")] = None,
        async_req: Optional[bool] = None,
        **kwargs,
    ) -> Union[str, Awaitable[str]]:  # noqa: E501
        """persons_uuid_first_name_get  # noqa: E501

        get operation for /persons/{uuid}/first_name  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.persons_uuid_first_name_get(uuid, last_name, async_req=True)
        >>> result = thread.get()

        :param uuid: (required)
        :type uuid: str
        :param last_name: Filter by last name
        :type last_name: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: str
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            raise ValueError(
                "Error! Please call the persons_uuid_first_name_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            )
        if async_req is not None:
            kwargs["async_req"] = async_req
        return self.persons_uuid_first_name_get_with_http_info(
            uuid, last_name, **kwargs
        )  # noqa: E501

    @validate_arguments
    def persons_uuid_first_name_get_with_http_info(
        self,
        uuid: StrictStr,
        last_name: Annotated[Optional[StrictStr], Field(description="Filter by last name")] = None,
        **kwargs,
    ) -> ApiResponse:  # noqa: E501
        """persons_uuid_first_name_get  # noqa: E501

        get operation for /persons/{uuid}/first_name  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.persons_uuid_first_name_get_with_http_info(uuid, last_name, async_req=True)
        >>> result = thread.get()

        :param uuid: (required)
        :type uuid: str
        :param last_name: Filter by last name
        :type last_name: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(str, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["uuid", "last_name"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method persons_uuid_first_name_get" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["uuid"]:
            _path_params["uuid"] = _params["uuid"]

        # process the query parameters
        _query_params = []
        if _params.get("last_name") is not None:  # noqa: E501
            _query_params.append(("last_name", _params["last_name"]))

        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # authentication setting
        _auth_settings = ["bearer_auth"]  # noqa: E501

        _response_types_map = {
            "200": "str",
        }

        return self.api_client.call_api(
            "/persons/{uuid}/first_name",
            "GET",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @overload
    async def persons_uuid_first_name_head(self, uuid: StrictStr, **kwargs) -> None:  # noqa: E501
        ...

    @overload
    def persons_uuid_first_name_head(
        self, uuid: StrictStr, async_req: Optional[bool] = True, **kwargs
    ) -> None:  # noqa: E501
        ...

    @validate_arguments
    def persons_uuid_first_name_head(
        self, uuid: StrictStr, async_req: Optional[bool] = None, **kwargs
    ) -> Union[None, Awaitable[None]]:  # noqa: E501
        """persons_uuid_first_name_head  # noqa: E501

        head operation for /persons/{uuid}/first_name  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.persons_uuid_first_name_head(uuid, async_req=True)
        >>> result = thread.get()

        :param uuid: (required)
        :type uuid: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            raise ValueError(
                "Error! Please call the persons_uuid_first_name_head_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            )
        if async_req is not None:
            kwargs["async_req"] = async_req
        return self.persons_uuid_first_name_head_with_http_info(uuid, **kwargs)  # noqa: E501

    @validate_arguments
    def persons_uuid_first_name_head_with_http_info(
        self, uuid: StrictStr, **kwargs
    ) -> ApiResponse:  # noqa: E501
        """persons_uuid_first_name_head  # noqa: E501

        head operation for /persons/{uuid}/first_name  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.persons_uuid_first_name_head_with_http_info(uuid, async_req=True)
        >>> result = thread.get()

        :param uuid: (required)
        :type uuid: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = ["uuid"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method persons_uuid_first_name_head" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["uuid"]:
            _path_params["uuid"] = _params["uuid"]

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = ["bearer_auth"]  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            "/persons/{uuid}/first_name",
            "HEAD",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @overload
    async def persons_uuid_first_name_put(
        self,
        uuid: StrictStr,
        body: Annotated[
            StrictStr, Field(..., description="The request body for /persons/{uuid}/first_name")
        ],
        **kwargs,
    ) -> str:  # noqa: E501
        ...

    @overload
    def persons_uuid_first_name_put(
        self,
        uuid: StrictStr,
        body: Annotated[
            StrictStr, Field(..., description="The request body for /persons/{uuid}/first_name")
        ],
        async_req: Optional[bool] = True,
        **kwargs,
    ) -> str:  # noqa: E501
        ...

    @validate_arguments
    def persons_uuid_first_name_put(
        self,
        uuid: StrictStr,
        body: Annotated[
            StrictStr, Field(..., description="The request body for /persons/{uuid}/first_name")
        ],
        async_req: Optional[bool] = None,
        **kwargs,
    ) -> Union[str, Awaitable[str]]:  # noqa: E501
        """persons_uuid_first_name_put  # noqa: E501

        put operation for /persons/{uuid}/first_name  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.persons_uuid_first_name_put(uuid, body, async_req=True)
        >>> result = thread.get()

        :param uuid: (required)
        :type uuid: str
        :param body: The request body for /persons/{uuid}/first_name (required)
        :type body: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: str
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            raise ValueError(
                "Error! Please call the persons_uuid_first_name_put_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            )
        if async_req is not None:
            kwargs["async_req"] = async_req
        return self.persons_uuid_first_name_put_with_http_info(uuid, body, **kwargs)  # noqa: E501

    @validate_arguments
    def persons_uuid_first_name_put_with_http_info(
        self,
        uuid: StrictStr,
        body: Annotated[
            StrictStr, Field(..., description="The request body for /persons/{uuid}/first_name")
        ],
        **kwargs,
    ) -> ApiResponse:  # noqa: E501
        """persons_uuid_first_name_put  # noqa: E501

        put operation for /persons/{uuid}/first_name  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.persons_uuid_first_name_put_with_http_info(uuid, body, async_req=True)
        >>> result = thread.get()

        :param uuid: (required)
        :type uuid: str
        :param body: The request body for /persons/{uuid}/first_name (required)
        :type body: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(str, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["uuid", "body"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method persons_uuid_first_name_put" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["uuid"]:
            _path_params["uuid"] = _params["uuid"]

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params["body"] is not None:
            _body_params = _params["body"]

        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get(
            "_content_type", self.api_client.select_header_content_type(["application/json"])
        )
        if _content_types_list:
            _header_params["Content-Type"] = _content_types_list

        # authentication setting
        _auth_settings = ["bearer_auth"]  # noqa: E501

        _response_types_map = {
            "200": "str",
        }

        return self.api_client.call_api(
            "/persons/{uuid}/first_name",
            "PUT",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @overload
    async def persons_uuid_get(
        self,
        uuid: StrictStr,
        last_name: Annotated[Optional[StrictStr], Field(description="Filter by last name")] = None,
        **kwargs,
    ) -> Person:  # noqa: E501
        ...

    @overload
    def persons_uuid_get(
        self,
        uuid: StrictStr,
        last_name: Annotated[Optional[StrictStr], Field(description="Filter by last name")] = None,
        async_req: Optional[bool] = True,
        **kwargs,
    ) -> Person:  # noqa: E501
        ...

    @validate_arguments
    def persons_uuid_get(
        self,
        uuid: StrictStr,
        last_name: Annotated[Optional[StrictStr], Field(description="Filter by last name")] = None,
        async_req: Optional[bool] = None,
        **kwargs,
    ) -> Union[Person, Awaitable[Person]]:  # noqa: E501
        """persons_uuid_get  # noqa: E501

        Get a specific person from this collection  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.persons_uuid_get(uuid, last_name, async_req=True)
        >>> result = thread.get()

        :param uuid: (required)
        :type uuid: str
        :param last_name: Filter by last name
        :type last_name: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Person
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            raise ValueError(
                "Error! Please call the persons_uuid_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            )
        if async_req is not None:
            kwargs["async_req"] = async_req
        return self.persons_uuid_get_with_http_info(uuid, last_name, **kwargs)  # noqa: E501

    @validate_arguments
    def persons_uuid_get_with_http_info(
        self,
        uuid: StrictStr,
        last_name: Annotated[Optional[StrictStr], Field(description="Filter by last name")] = None,
        **kwargs,
    ) -> ApiResponse:  # noqa: E501
        """persons_uuid_get  # noqa: E501

        Get a specific person from this collection  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.persons_uuid_get_with_http_info(uuid, last_name, async_req=True)
        >>> result = thread.get()

        :param uuid: (required)
        :type uuid: str
        :param last_name: Filter by last name
        :type last_name: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Person, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["uuid", "last_name"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'" " to method persons_uuid_get" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["uuid"]:
            _path_params["uuid"] = _params["uuid"]

        # process the query parameters
        _query_params = []
        if _params.get("last_name") is not None:  # noqa: E501
            _query_params.append(("last_name", _params["last_name"]))

        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # authentication setting
        _auth_settings = ["bearer_auth"]  # noqa: E501

        _response_types_map = {
            "200": "Person",
        }

        return self.api_client.call_api(
            "/persons/{uuid}",
            "GET",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @overload
    async def persons_uuid_head(self, uuid: StrictStr, **kwargs) -> None:  # noqa: E501
        ...

    @overload
    def persons_uuid_head(
        self, uuid: StrictStr, async_req: Optional[bool] = True, **kwargs
    ) -> None:  # noqa: E501
        ...

    @validate_arguments
    def persons_uuid_head(
        self, uuid: StrictStr, async_req: Optional[bool] = None, **kwargs
    ) -> Union[None, Awaitable[None]]:  # noqa: E501
        """persons_uuid_head  # noqa: E501

        Determine the existence and size of this person  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.persons_uuid_head(uuid, async_req=True)
        >>> result = thread.get()

        :param uuid: (required)
        :type uuid: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            raise ValueError(
                "Error! Please call the persons_uuid_head_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            )
        if async_req is not None:
            kwargs["async_req"] = async_req
        return self.persons_uuid_head_with_http_info(uuid, **kwargs)  # noqa: E501

    @validate_arguments
    def persons_uuid_head_with_http_info(
        self, uuid: StrictStr, **kwargs
    ) -> ApiResponse:  # noqa: E501
        """persons_uuid_head  # noqa: E501

        Determine the existence and size of this person  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.persons_uuid_head_with_http_info(uuid, async_req=True)
        >>> result = thread.get()

        :param uuid: (required)
        :type uuid: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = ["uuid"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'" " to method persons_uuid_head" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["uuid"]:
            _path_params["uuid"] = _params["uuid"]

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = ["bearer_auth"]  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            "/persons/{uuid}",
            "HEAD",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @overload
    async def persons_uuid_hobbies_delete(
        self, uuid: StrictStr, **kwargs
    ) -> List[str]:  # noqa: E501
        ...

    @overload
    def persons_uuid_hobbies_delete(
        self, uuid: StrictStr, async_req: Optional[bool] = True, **kwargs
    ) -> List[str]:  # noqa: E501
        ...

    @validate_arguments
    def persons_uuid_hobbies_delete(
        self, uuid: StrictStr, async_req: Optional[bool] = None, **kwargs
    ) -> Union[List[str], Awaitable[List[str]]]:  # noqa: E501
        """persons_uuid_hobbies_delete  # noqa: E501

        delete operation for /persons/{uuid}/hobbies  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.persons_uuid_hobbies_delete(uuid, async_req=True)
        >>> result = thread.get()

        :param uuid: (required)
        :type uuid: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[str]
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            raise ValueError(
                "Error! Please call the persons_uuid_hobbies_delete_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            )
        if async_req is not None:
            kwargs["async_req"] = async_req
        return self.persons_uuid_hobbies_delete_with_http_info(uuid, **kwargs)  # noqa: E501

    @validate_arguments
    def persons_uuid_hobbies_delete_with_http_info(
        self, uuid: StrictStr, **kwargs
    ) -> ApiResponse:  # noqa: E501
        """persons_uuid_hobbies_delete  # noqa: E501

        delete operation for /persons/{uuid}/hobbies  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.persons_uuid_hobbies_delete_with_http_info(uuid, async_req=True)
        >>> result = thread.get()

        :param uuid: (required)
        :type uuid: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[str], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["uuid"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method persons_uuid_hobbies_delete" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["uuid"]:
            _path_params["uuid"] = _params["uuid"]

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # authentication setting
        _auth_settings = ["bearer_auth"]  # noqa: E501

        _response_types_map = {
            "200": "List[str]",
        }

        return self.api_client.call_api(
            "/persons/{uuid}/hobbies",
            "DELETE",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @overload
    async def persons_uuid_hobbies_get(
        self,
        uuid: StrictStr,
        last_name: Annotated[Optional[StrictStr], Field(description="Filter by last name")] = None,
        **kwargs,
    ) -> List[str]:  # noqa: E501
        ...

    @overload
    def persons_uuid_hobbies_get(
        self,
        uuid: StrictStr,
        last_name: Annotated[Optional[StrictStr], Field(description="Filter by last name")] = None,
        async_req: Optional[bool] = True,
        **kwargs,
    ) -> List[str]:  # noqa: E501
        ...

    @validate_arguments
    def persons_uuid_hobbies_get(
        self,
        uuid: StrictStr,
        last_name: Annotated[Optional[StrictStr], Field(description="Filter by last name")] = None,
        async_req: Optional[bool] = None,
        **kwargs,
    ) -> Union[List[str], Awaitable[List[str]]]:  # noqa: E501
        """persons_uuid_hobbies_get  # noqa: E501

        get operation for /persons/{uuid}/hobbies  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.persons_uuid_hobbies_get(uuid, last_name, async_req=True)
        >>> result = thread.get()

        :param uuid: (required)
        :type uuid: str
        :param last_name: Filter by last name
        :type last_name: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[str]
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            raise ValueError(
                "Error! Please call the persons_uuid_hobbies_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            )
        if async_req is not None:
            kwargs["async_req"] = async_req
        return self.persons_uuid_hobbies_get_with_http_info(uuid, last_name, **kwargs)  # noqa: E501

    @validate_arguments
    def persons_uuid_hobbies_get_with_http_info(
        self,
        uuid: StrictStr,
        last_name: Annotated[Optional[StrictStr], Field(description="Filter by last name")] = None,
        **kwargs,
    ) -> ApiResponse:  # noqa: E501
        """persons_uuid_hobbies_get  # noqa: E501

        get operation for /persons/{uuid}/hobbies  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.persons_uuid_hobbies_get_with_http_info(uuid, last_name, async_req=True)
        >>> result = thread.get()

        :param uuid: (required)
        :type uuid: str
        :param last_name: Filter by last name
        :type last_name: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[str], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["uuid", "last_name"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method persons_uuid_hobbies_get" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["uuid"]:
            _path_params["uuid"] = _params["uuid"]

        # process the query parameters
        _query_params = []
        if _params.get("last_name") is not None:  # noqa: E501
            _query_params.append(("last_name", _params["last_name"]))

        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # authentication setting
        _auth_settings = ["bearer_auth"]  # noqa: E501

        _response_types_map = {
            "200": "List[str]",
        }

        return self.api_client.call_api(
            "/persons/{uuid}/hobbies",
            "GET",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @overload
    async def persons_uuid_hobbies_head(self, uuid: StrictStr, **kwargs) -> None:  # noqa: E501
        ...

    @overload
    def persons_uuid_hobbies_head(
        self, uuid: StrictStr, async_req: Optional[bool] = True, **kwargs
    ) -> None:  # noqa: E501
        ...

    @validate_arguments
    def persons_uuid_hobbies_head(
        self, uuid: StrictStr, async_req: Optional[bool] = None, **kwargs
    ) -> Union[None, Awaitable[None]]:  # noqa: E501
        """persons_uuid_hobbies_head  # noqa: E501

        head operation for /persons/{uuid}/hobbies  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.persons_uuid_hobbies_head(uuid, async_req=True)
        >>> result = thread.get()

        :param uuid: (required)
        :type uuid: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            raise ValueError(
                "Error! Please call the persons_uuid_hobbies_head_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            )
        if async_req is not None:
            kwargs["async_req"] = async_req
        return self.persons_uuid_hobbies_head_with_http_info(uuid, **kwargs)  # noqa: E501

    @validate_arguments
    def persons_uuid_hobbies_head_with_http_info(
        self, uuid: StrictStr, **kwargs
    ) -> ApiResponse:  # noqa: E501
        """persons_uuid_hobbies_head  # noqa: E501

        head operation for /persons/{uuid}/hobbies  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.persons_uuid_hobbies_head_with_http_info(uuid, async_req=True)
        >>> result = thread.get()

        :param uuid: (required)
        :type uuid: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = ["uuid"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method persons_uuid_hobbies_head" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["uuid"]:
            _path_params["uuid"] = _params["uuid"]

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = ["bearer_auth"]  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            "/persons/{uuid}/hobbies",
            "HEAD",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @overload
    async def persons_uuid_hobbies_put(
        self,
        uuid: StrictStr,
        person: Annotated[
            Person, Field(..., description="The request body for /persons/{uuid}/hobbies")
        ],
        **kwargs,
    ) -> List[str]:  # noqa: E501
        ...

    @overload
    def persons_uuid_hobbies_put(
        self,
        uuid: StrictStr,
        person: Annotated[
            Person, Field(..., description="The request body for /persons/{uuid}/hobbies")
        ],
        async_req: Optional[bool] = True,
        **kwargs,
    ) -> List[str]:  # noqa: E501
        ...

    @validate_arguments
    def persons_uuid_hobbies_put(
        self,
        uuid: StrictStr,
        person: Annotated[
            Person, Field(..., description="The request body for /persons/{uuid}/hobbies")
        ],
        async_req: Optional[bool] = None,
        **kwargs,
    ) -> Union[List[str], Awaitable[List[str]]]:  # noqa: E501
        """persons_uuid_hobbies_put  # noqa: E501

        put operation for /persons/{uuid}/hobbies  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.persons_uuid_hobbies_put(uuid, person, async_req=True)
        >>> result = thread.get()

        :param uuid: (required)
        :type uuid: str
        :param person: The request body for /persons/{uuid}/hobbies (required)
        :type person: Person
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[str]
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            raise ValueError(
                "Error! Please call the persons_uuid_hobbies_put_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            )
        if async_req is not None:
            kwargs["async_req"] = async_req
        return self.persons_uuid_hobbies_put_with_http_info(uuid, person, **kwargs)  # noqa: E501

    @validate_arguments
    def persons_uuid_hobbies_put_with_http_info(
        self,
        uuid: StrictStr,
        person: Annotated[
            Person, Field(..., description="The request body for /persons/{uuid}/hobbies")
        ],
        **kwargs,
    ) -> ApiResponse:  # noqa: E501
        """persons_uuid_hobbies_put  # noqa: E501

        put operation for /persons/{uuid}/hobbies  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.persons_uuid_hobbies_put_with_http_info(uuid, person, async_req=True)
        >>> result = thread.get()

        :param uuid: (required)
        :type uuid: str
        :param person: The request body for /persons/{uuid}/hobbies (required)
        :type person: Person
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[str], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["uuid", "person"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method persons_uuid_hobbies_put" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["uuid"]:
            _path_params["uuid"] = _params["uuid"]

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params["person"] is not None:
            _body_params = _params["person"]

        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get(
            "_content_type", self.api_client.select_header_content_type(["application/json"])
        )
        if _content_types_list:
            _header_params["Content-Type"] = _content_types_list

        # authentication setting
        _auth_settings = ["bearer_auth"]  # noqa: E501

        _response_types_map = {
            "200": "List[str]",
        }

        return self.api_client.call_api(
            "/persons/{uuid}/hobbies",
            "PUT",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @overload
    async def persons_uuid_last_name_delete(self, uuid: StrictStr, **kwargs) -> str:  # noqa: E501
        ...

    @overload
    def persons_uuid_last_name_delete(
        self, uuid: StrictStr, async_req: Optional[bool] = True, **kwargs
    ) -> str:  # noqa: E501
        ...

    @validate_arguments
    def persons_uuid_last_name_delete(
        self, uuid: StrictStr, async_req: Optional[bool] = None, **kwargs
    ) -> Union[str, Awaitable[str]]:  # noqa: E501
        """persons_uuid_last_name_delete  # noqa: E501

        delete operation for /persons/{uuid}/last_name  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.persons_uuid_last_name_delete(uuid, async_req=True)
        >>> result = thread.get()

        :param uuid: (required)
        :type uuid: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: str
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            raise ValueError(
                "Error! Please call the persons_uuid_last_name_delete_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            )
        if async_req is not None:
            kwargs["async_req"] = async_req
        return self.persons_uuid_last_name_delete_with_http_info(uuid, **kwargs)  # noqa: E501

    @validate_arguments
    def persons_uuid_last_name_delete_with_http_info(
        self, uuid: StrictStr, **kwargs
    ) -> ApiResponse:  # noqa: E501
        """persons_uuid_last_name_delete  # noqa: E501

        delete operation for /persons/{uuid}/last_name  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.persons_uuid_last_name_delete_with_http_info(uuid, async_req=True)
        >>> result = thread.get()

        :param uuid: (required)
        :type uuid: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(str, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["uuid"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method persons_uuid_last_name_delete" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["uuid"]:
            _path_params["uuid"] = _params["uuid"]

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # authentication setting
        _auth_settings = ["bearer_auth"]  # noqa: E501

        _response_types_map = {
            "200": "str",
        }

        return self.api_client.call_api(
            "/persons/{uuid}/last_name",
            "DELETE",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @overload
    async def persons_uuid_last_name_get(
        self,
        uuid: StrictStr,
        last_name: Annotated[Optional[StrictStr], Field(description="Filter by last name")] = None,
        **kwargs,
    ) -> str:  # noqa: E501
        ...

    @overload
    def persons_uuid_last_name_get(
        self,
        uuid: StrictStr,
        last_name: Annotated[Optional[StrictStr], Field(description="Filter by last name")] = None,
        async_req: Optional[bool] = True,
        **kwargs,
    ) -> str:  # noqa: E501
        ...

    @validate_arguments
    def persons_uuid_last_name_get(
        self,
        uuid: StrictStr,
        last_name: Annotated[Optional[StrictStr], Field(description="Filter by last name")] = None,
        async_req: Optional[bool] = None,
        **kwargs,
    ) -> Union[str, Awaitable[str]]:  # noqa: E501
        """persons_uuid_last_name_get  # noqa: E501

        get operation for /persons/{uuid}/last_name  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.persons_uuid_last_name_get(uuid, last_name, async_req=True)
        >>> result = thread.get()

        :param uuid: (required)
        :type uuid: str
        :param last_name: Filter by last name
        :type last_name: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: str
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            raise ValueError(
                "Error! Please call the persons_uuid_last_name_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            )
        if async_req is not None:
            kwargs["async_req"] = async_req
        return self.persons_uuid_last_name_get_with_http_info(
            uuid, last_name, **kwargs
        )  # noqa: E501

    @validate_arguments
    def persons_uuid_last_name_get_with_http_info(
        self,
        uuid: StrictStr,
        last_name: Annotated[Optional[StrictStr], Field(description="Filter by last name")] = None,
        **kwargs,
    ) -> ApiResponse:  # noqa: E501
        """persons_uuid_last_name_get  # noqa: E501

        get operation for /persons/{uuid}/last_name  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.persons_uuid_last_name_get_with_http_info(uuid, last_name, async_req=True)
        >>> result = thread.get()

        :param uuid: (required)
        :type uuid: str
        :param last_name: Filter by last name
        :type last_name: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(str, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["uuid", "last_name"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method persons_uuid_last_name_get" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["uuid"]:
            _path_params["uuid"] = _params["uuid"]

        # process the query parameters
        _query_params = []
        if _params.get("last_name") is not None:  # noqa: E501
            _query_params.append(("last_name", _params["last_name"]))

        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # authentication setting
        _auth_settings = ["bearer_auth"]  # noqa: E501

        _response_types_map = {
            "200": "str",
        }

        return self.api_client.call_api(
            "/persons/{uuid}/last_name",
            "GET",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @overload
    async def persons_uuid_last_name_head(self, uuid: StrictStr, **kwargs) -> None:  # noqa: E501
        ...

    @overload
    def persons_uuid_last_name_head(
        self, uuid: StrictStr, async_req: Optional[bool] = True, **kwargs
    ) -> None:  # noqa: E501
        ...

    @validate_arguments
    def persons_uuid_last_name_head(
        self, uuid: StrictStr, async_req: Optional[bool] = None, **kwargs
    ) -> Union[None, Awaitable[None]]:  # noqa: E501
        """persons_uuid_last_name_head  # noqa: E501

        head operation for /persons/{uuid}/last_name  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.persons_uuid_last_name_head(uuid, async_req=True)
        >>> result = thread.get()

        :param uuid: (required)
        :type uuid: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            raise ValueError(
                "Error! Please call the persons_uuid_last_name_head_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            )
        if async_req is not None:
            kwargs["async_req"] = async_req
        return self.persons_uuid_last_name_head_with_http_info(uuid, **kwargs)  # noqa: E501

    @validate_arguments
    def persons_uuid_last_name_head_with_http_info(
        self, uuid: StrictStr, **kwargs
    ) -> ApiResponse:  # noqa: E501
        """persons_uuid_last_name_head  # noqa: E501

        head operation for /persons/{uuid}/last_name  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.persons_uuid_last_name_head_with_http_info(uuid, async_req=True)
        >>> result = thread.get()

        :param uuid: (required)
        :type uuid: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = ["uuid"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method persons_uuid_last_name_head" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["uuid"]:
            _path_params["uuid"] = _params["uuid"]

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = ["bearer_auth"]  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            "/persons/{uuid}/last_name",
            "HEAD",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @overload
    async def persons_uuid_last_name_put(
        self,
        uuid: StrictStr,
        body: Annotated[
            StrictStr, Field(..., description="The request body for /persons/{uuid}/last_name")
        ],
        **kwargs,
    ) -> str:  # noqa: E501
        ...

    @overload
    def persons_uuid_last_name_put(
        self,
        uuid: StrictStr,
        body: Annotated[
            StrictStr, Field(..., description="The request body for /persons/{uuid}/last_name")
        ],
        async_req: Optional[bool] = True,
        **kwargs,
    ) -> str:  # noqa: E501
        ...

    @validate_arguments
    def persons_uuid_last_name_put(
        self,
        uuid: StrictStr,
        body: Annotated[
            StrictStr, Field(..., description="The request body for /persons/{uuid}/last_name")
        ],
        async_req: Optional[bool] = None,
        **kwargs,
    ) -> Union[str, Awaitable[str]]:  # noqa: E501
        """persons_uuid_last_name_put  # noqa: E501

        put operation for /persons/{uuid}/last_name  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.persons_uuid_last_name_put(uuid, body, async_req=True)
        >>> result = thread.get()

        :param uuid: (required)
        :type uuid: str
        :param body: The request body for /persons/{uuid}/last_name (required)
        :type body: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: str
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            raise ValueError(
                "Error! Please call the persons_uuid_last_name_put_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            )
        if async_req is not None:
            kwargs["async_req"] = async_req
        return self.persons_uuid_last_name_put_with_http_info(uuid, body, **kwargs)  # noqa: E501

    @validate_arguments
    def persons_uuid_last_name_put_with_http_info(
        self,
        uuid: StrictStr,
        body: Annotated[
            StrictStr, Field(..., description="The request body for /persons/{uuid}/last_name")
        ],
        **kwargs,
    ) -> ApiResponse:  # noqa: E501
        """persons_uuid_last_name_put  # noqa: E501

        put operation for /persons/{uuid}/last_name  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.persons_uuid_last_name_put_with_http_info(uuid, body, async_req=True)
        >>> result = thread.get()

        :param uuid: (required)
        :type uuid: str
        :param body: The request body for /persons/{uuid}/last_name (required)
        :type body: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(str, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["uuid", "body"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method persons_uuid_last_name_put" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["uuid"]:
            _path_params["uuid"] = _params["uuid"]

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params["body"] is not None:
            _body_params = _params["body"]

        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get(
            "_content_type", self.api_client.select_header_content_type(["application/json"])
        )
        if _content_types_list:
            _header_params["Content-Type"] = _content_types_list

        # authentication setting
        _auth_settings = ["bearer_auth"]  # noqa: E501

        _response_types_map = {
            "200": "str",
        }

        return self.api_client.call_api(
            "/persons/{uuid}/last_name",
            "PUT",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @overload
    async def persons_uuid_put(
        self,
        uuid: StrictStr,
        update_person: Annotated[
            UpdatePerson, Field(..., description="The request body for /persons/{uuid}")
        ],
        **kwargs,
    ) -> UpdatePerson:  # noqa: E501
        ...

    @overload
    def persons_uuid_put(
        self,
        uuid: StrictStr,
        update_person: Annotated[
            UpdatePerson, Field(..., description="The request body for /persons/{uuid}")
        ],
        async_req: Optional[bool] = True,
        **kwargs,
    ) -> UpdatePerson:  # noqa: E501
        ...

    @validate_arguments
    def persons_uuid_put(
        self,
        uuid: StrictStr,
        update_person: Annotated[
            UpdatePerson, Field(..., description="The request body for /persons/{uuid}")
        ],
        async_req: Optional[bool] = None,
        **kwargs,
    ) -> Union[UpdatePerson, Awaitable[UpdatePerson]]:  # noqa: E501
        """persons_uuid_put  # noqa: E501

        Put a new person in this collection, with the given UUId key  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.persons_uuid_put(uuid, update_person, async_req=True)
        >>> result = thread.get()

        :param uuid: (required)
        :type uuid: str
        :param update_person: The request body for /persons/{uuid} (required)
        :type update_person: UpdatePerson
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: UpdatePerson
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            raise ValueError(
                "Error! Please call the persons_uuid_put_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            )
        if async_req is not None:
            kwargs["async_req"] = async_req
        return self.persons_uuid_put_with_http_info(uuid, update_person, **kwargs)  # noqa: E501

    @validate_arguments
    def persons_uuid_put_with_http_info(
        self,
        uuid: StrictStr,
        update_person: Annotated[
            UpdatePerson, Field(..., description="The request body for /persons/{uuid}")
        ],
        **kwargs,
    ) -> ApiResponse:  # noqa: E501
        """persons_uuid_put  # noqa: E501

        Put a new person in this collection, with the given UUId key  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.persons_uuid_put_with_http_info(uuid, update_person, async_req=True)
        >>> result = thread.get()

        :param uuid: (required)
        :type uuid: str
        :param update_person: The request body for /persons/{uuid} (required)
        :type update_person: UpdatePerson
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(UpdatePerson, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["uuid", "update_person"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'" " to method persons_uuid_put" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["uuid"]:
            _path_params["uuid"] = _params["uuid"]

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params["update_person"] is not None:
            _body_params = _params["update_person"]

        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get(
            "_content_type", self.api_client.select_header_content_type(["application/json"])
        )
        if _content_types_list:
            _header_params["Content-Type"] = _content_types_list

        # authentication setting
        _auth_settings = ["bearer_auth"]  # noqa: E501

        _response_types_map = {
            "200": "UpdatePerson",
        }

        return self.api_client.call_api(
            "/persons/{uuid}",
            "PUT",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )
