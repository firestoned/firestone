# coding: utf-8

"""
    Example person and addressbook API

    Example person and addressbook API  # noqa: E501

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError
from typing_extensions import Annotated
from typing import overload, Optional, Union, Awaitable

from pydantic import Field, StrictInt, StrictStr

from typing import List, Optional

from addressbook.client.models.addressbook import Addressbook
from addressbook.client.models.create_addressbook import CreateAddressbook
from addressbook.client.models.create_person import CreatePerson
from addressbook.client.models.person import Person
from addressbook.client.models.update_addressbook import UpdateAddressbook
from addressbook.client.models.update_person import UpdatePerson

from addressbook.client.api_client import ApiClient
from addressbook.client.api_response import ApiResponse
from addressbook.client.exceptions import ApiTypeError, ApiValueError  # noqa: F401


class AddressbookApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @overload
    async def addressbook_address_key_addrtype_delete(
        self, address_key: StrictStr, **kwargs
    ) -> str:  # noqa: E501
        ...

    @overload
    def addressbook_address_key_addrtype_delete(
        self, address_key: StrictStr, async_req: Optional[bool] = True, **kwargs
    ) -> str:  # noqa: E501
        ...

    @validate_arguments
    def addressbook_address_key_addrtype_delete(
        self, address_key: StrictStr, async_req: Optional[bool] = None, **kwargs
    ) -> Union[str, Awaitable[str]]:  # noqa: E501
        """addressbook_address_key_addrtype_delete  # noqa: E501

        delete operation for /addressbook/{address_key}/addrtype  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.addressbook_address_key_addrtype_delete(address_key, async_req=True)
        >>> result = thread.get()

        :param address_key: (required)
        :type address_key: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: str
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            raise ValueError(
                "Error! Please call the addressbook_address_key_addrtype_delete_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            )
        if async_req is not None:
            kwargs["async_req"] = async_req
        return self.addressbook_address_key_addrtype_delete_with_http_info(
            address_key, **kwargs
        )  # noqa: E501

    @validate_arguments
    def addressbook_address_key_addrtype_delete_with_http_info(
        self, address_key: StrictStr, **kwargs
    ) -> ApiResponse:  # noqa: E501
        """addressbook_address_key_addrtype_delete  # noqa: E501

        delete operation for /addressbook/{address_key}/addrtype  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.addressbook_address_key_addrtype_delete_with_http_info(address_key, async_req=True)
        >>> result = thread.get()

        :param address_key: (required)
        :type address_key: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(str, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["address_key"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method addressbook_address_key_addrtype_delete" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["address_key"]:
            _path_params["address_key"] = _params["address_key"]

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # authentication setting
        _auth_settings = ["bearer_auth"]  # noqa: E501

        _response_types_map = {
            "200": "str",
        }

        return self.api_client.call_api(
            "/addressbook/{address_key}/addrtype",
            "DELETE",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @overload
    async def addressbook_address_key_addrtype_get(
        self,
        address_key: StrictStr,
        city: Annotated[Optional[StrictStr], Field(description="Filter by city name")] = None,
        **kwargs,
    ) -> str:  # noqa: E501
        ...

    @overload
    def addressbook_address_key_addrtype_get(
        self,
        address_key: StrictStr,
        city: Annotated[Optional[StrictStr], Field(description="Filter by city name")] = None,
        async_req: Optional[bool] = True,
        **kwargs,
    ) -> str:  # noqa: E501
        ...

    @validate_arguments
    def addressbook_address_key_addrtype_get(
        self,
        address_key: StrictStr,
        city: Annotated[Optional[StrictStr], Field(description="Filter by city name")] = None,
        async_req: Optional[bool] = None,
        **kwargs,
    ) -> Union[str, Awaitable[str]]:  # noqa: E501
        """addressbook_address_key_addrtype_get  # noqa: E501

        get operation for /addressbook/{address_key}/addrtype  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.addressbook_address_key_addrtype_get(address_key, city, async_req=True)
        >>> result = thread.get()

        :param address_key: (required)
        :type address_key: str
        :param city: Filter by city name
        :type city: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: str
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            raise ValueError(
                "Error! Please call the addressbook_address_key_addrtype_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            )
        if async_req is not None:
            kwargs["async_req"] = async_req
        return self.addressbook_address_key_addrtype_get_with_http_info(
            address_key, city, **kwargs
        )  # noqa: E501

    @validate_arguments
    def addressbook_address_key_addrtype_get_with_http_info(
        self,
        address_key: StrictStr,
        city: Annotated[Optional[StrictStr], Field(description="Filter by city name")] = None,
        **kwargs,
    ) -> ApiResponse:  # noqa: E501
        """addressbook_address_key_addrtype_get  # noqa: E501

        get operation for /addressbook/{address_key}/addrtype  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.addressbook_address_key_addrtype_get_with_http_info(address_key, city, async_req=True)
        >>> result = thread.get()

        :param address_key: (required)
        :type address_key: str
        :param city: Filter by city name
        :type city: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(str, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["address_key", "city"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method addressbook_address_key_addrtype_get" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["address_key"]:
            _path_params["address_key"] = _params["address_key"]

        # process the query parameters
        _query_params = []
        if _params.get("city") is not None:  # noqa: E501
            _query_params.append(("city", _params["city"]))

        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # authentication setting
        _auth_settings = ["bearer_auth"]  # noqa: E501

        _response_types_map = {
            "200": "str",
        }

        return self.api_client.call_api(
            "/addressbook/{address_key}/addrtype",
            "GET",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @overload
    async def addressbook_address_key_addrtype_head(
        self, address_key: StrictStr, **kwargs
    ) -> None:  # noqa: E501
        ...

    @overload
    def addressbook_address_key_addrtype_head(
        self, address_key: StrictStr, async_req: Optional[bool] = True, **kwargs
    ) -> None:  # noqa: E501
        ...

    @validate_arguments
    def addressbook_address_key_addrtype_head(
        self, address_key: StrictStr, async_req: Optional[bool] = None, **kwargs
    ) -> Union[None, Awaitable[None]]:  # noqa: E501
        """addressbook_address_key_addrtype_head  # noqa: E501

        head operation for /addressbook/{address_key}/addrtype  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.addressbook_address_key_addrtype_head(address_key, async_req=True)
        >>> result = thread.get()

        :param address_key: (required)
        :type address_key: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            raise ValueError(
                "Error! Please call the addressbook_address_key_addrtype_head_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            )
        if async_req is not None:
            kwargs["async_req"] = async_req
        return self.addressbook_address_key_addrtype_head_with_http_info(
            address_key, **kwargs
        )  # noqa: E501

    @validate_arguments
    def addressbook_address_key_addrtype_head_with_http_info(
        self, address_key: StrictStr, **kwargs
    ) -> ApiResponse:  # noqa: E501
        """addressbook_address_key_addrtype_head  # noqa: E501

        head operation for /addressbook/{address_key}/addrtype  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.addressbook_address_key_addrtype_head_with_http_info(address_key, async_req=True)
        >>> result = thread.get()

        :param address_key: (required)
        :type address_key: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = ["address_key"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method addressbook_address_key_addrtype_head" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["address_key"]:
            _path_params["address_key"] = _params["address_key"]

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = ["bearer_auth"]  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            "/addressbook/{address_key}/addrtype",
            "HEAD",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @overload
    async def addressbook_address_key_addrtype_put(
        self,
        address_key: StrictStr,
        addressbook: Annotated[
            Addressbook,
            Field(..., description="The request body for /addressbook/{address_key}/addrtype"),
        ],
        **kwargs,
    ) -> str:  # noqa: E501
        ...

    @overload
    def addressbook_address_key_addrtype_put(
        self,
        address_key: StrictStr,
        addressbook: Annotated[
            Addressbook,
            Field(..., description="The request body for /addressbook/{address_key}/addrtype"),
        ],
        async_req: Optional[bool] = True,
        **kwargs,
    ) -> str:  # noqa: E501
        ...

    @validate_arguments
    def addressbook_address_key_addrtype_put(
        self,
        address_key: StrictStr,
        addressbook: Annotated[
            Addressbook,
            Field(..., description="The request body for /addressbook/{address_key}/addrtype"),
        ],
        async_req: Optional[bool] = None,
        **kwargs,
    ) -> Union[str, Awaitable[str]]:  # noqa: E501
        """addressbook_address_key_addrtype_put  # noqa: E501

        put operation for /addressbook/{address_key}/addrtype  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.addressbook_address_key_addrtype_put(address_key, addressbook, async_req=True)
        >>> result = thread.get()

        :param address_key: (required)
        :type address_key: str
        :param addressbook: The request body for /addressbook/{address_key}/addrtype (required)
        :type addressbook: Addressbook
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: str
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            raise ValueError(
                "Error! Please call the addressbook_address_key_addrtype_put_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            )
        if async_req is not None:
            kwargs["async_req"] = async_req
        return self.addressbook_address_key_addrtype_put_with_http_info(
            address_key, addressbook, **kwargs
        )  # noqa: E501

    @validate_arguments
    def addressbook_address_key_addrtype_put_with_http_info(
        self,
        address_key: StrictStr,
        addressbook: Annotated[
            Addressbook,
            Field(..., description="The request body for /addressbook/{address_key}/addrtype"),
        ],
        **kwargs,
    ) -> ApiResponse:  # noqa: E501
        """addressbook_address_key_addrtype_put  # noqa: E501

        put operation for /addressbook/{address_key}/addrtype  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.addressbook_address_key_addrtype_put_with_http_info(address_key, addressbook, async_req=True)
        >>> result = thread.get()

        :param address_key: (required)
        :type address_key: str
        :param addressbook: The request body for /addressbook/{address_key}/addrtype (required)
        :type addressbook: Addressbook
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(str, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["address_key", "addressbook"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method addressbook_address_key_addrtype_put" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["address_key"]:
            _path_params["address_key"] = _params["address_key"]

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params["addressbook"] is not None:
            _body_params = _params["addressbook"]

        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get(
            "_content_type", self.api_client.select_header_content_type(["application/json"])
        )
        if _content_types_list:
            _header_params["Content-Type"] = _content_types_list

        # authentication setting
        _auth_settings = ["bearer_auth"]  # noqa: E501

        _response_types_map = {
            "200": "str",
        }

        return self.api_client.call_api(
            "/addressbook/{address_key}/addrtype",
            "PUT",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @overload
    async def addressbook_address_key_city_delete(
        self, address_key: StrictStr, **kwargs
    ) -> str:  # noqa: E501
        ...

    @overload
    def addressbook_address_key_city_delete(
        self, address_key: StrictStr, async_req: Optional[bool] = True, **kwargs
    ) -> str:  # noqa: E501
        ...

    @validate_arguments
    def addressbook_address_key_city_delete(
        self, address_key: StrictStr, async_req: Optional[bool] = None, **kwargs
    ) -> Union[str, Awaitable[str]]:  # noqa: E501
        """addressbook_address_key_city_delete  # noqa: E501

        delete operation for /addressbook/{address_key}/city  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.addressbook_address_key_city_delete(address_key, async_req=True)
        >>> result = thread.get()

        :param address_key: (required)
        :type address_key: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: str
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            raise ValueError(
                "Error! Please call the addressbook_address_key_city_delete_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            )
        if async_req is not None:
            kwargs["async_req"] = async_req
        return self.addressbook_address_key_city_delete_with_http_info(
            address_key, **kwargs
        )  # noqa: E501

    @validate_arguments
    def addressbook_address_key_city_delete_with_http_info(
        self, address_key: StrictStr, **kwargs
    ) -> ApiResponse:  # noqa: E501
        """addressbook_address_key_city_delete  # noqa: E501

        delete operation for /addressbook/{address_key}/city  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.addressbook_address_key_city_delete_with_http_info(address_key, async_req=True)
        >>> result = thread.get()

        :param address_key: (required)
        :type address_key: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(str, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["address_key"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method addressbook_address_key_city_delete" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["address_key"]:
            _path_params["address_key"] = _params["address_key"]

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # authentication setting
        _auth_settings = ["bearer_auth"]  # noqa: E501

        _response_types_map = {
            "200": "str",
        }

        return self.api_client.call_api(
            "/addressbook/{address_key}/city",
            "DELETE",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @overload
    async def addressbook_address_key_city_get(
        self,
        address_key: StrictStr,
        city: Annotated[Optional[StrictStr], Field(description="Filter by city name")] = None,
        **kwargs,
    ) -> str:  # noqa: E501
        ...

    @overload
    def addressbook_address_key_city_get(
        self,
        address_key: StrictStr,
        city: Annotated[Optional[StrictStr], Field(description="Filter by city name")] = None,
        async_req: Optional[bool] = True,
        **kwargs,
    ) -> str:  # noqa: E501
        ...

    @validate_arguments
    def addressbook_address_key_city_get(
        self,
        address_key: StrictStr,
        city: Annotated[Optional[StrictStr], Field(description="Filter by city name")] = None,
        async_req: Optional[bool] = None,
        **kwargs,
    ) -> Union[str, Awaitable[str]]:  # noqa: E501
        """addressbook_address_key_city_get  # noqa: E501

        get operation for /addressbook/{address_key}/city  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.addressbook_address_key_city_get(address_key, city, async_req=True)
        >>> result = thread.get()

        :param address_key: (required)
        :type address_key: str
        :param city: Filter by city name
        :type city: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: str
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            raise ValueError(
                "Error! Please call the addressbook_address_key_city_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            )
        if async_req is not None:
            kwargs["async_req"] = async_req
        return self.addressbook_address_key_city_get_with_http_info(
            address_key, city, **kwargs
        )  # noqa: E501

    @validate_arguments
    def addressbook_address_key_city_get_with_http_info(
        self,
        address_key: StrictStr,
        city: Annotated[Optional[StrictStr], Field(description="Filter by city name")] = None,
        **kwargs,
    ) -> ApiResponse:  # noqa: E501
        """addressbook_address_key_city_get  # noqa: E501

        get operation for /addressbook/{address_key}/city  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.addressbook_address_key_city_get_with_http_info(address_key, city, async_req=True)
        >>> result = thread.get()

        :param address_key: (required)
        :type address_key: str
        :param city: Filter by city name
        :type city: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(str, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["address_key", "city"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method addressbook_address_key_city_get" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["address_key"]:
            _path_params["address_key"] = _params["address_key"]

        # process the query parameters
        _query_params = []
        if _params.get("city") is not None:  # noqa: E501
            _query_params.append(("city", _params["city"]))

        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # authentication setting
        _auth_settings = ["bearer_auth"]  # noqa: E501

        _response_types_map = {
            "200": "str",
        }

        return self.api_client.call_api(
            "/addressbook/{address_key}/city",
            "GET",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @overload
    async def addressbook_address_key_city_head(
        self, address_key: StrictStr, **kwargs
    ) -> None:  # noqa: E501
        ...

    @overload
    def addressbook_address_key_city_head(
        self, address_key: StrictStr, async_req: Optional[bool] = True, **kwargs
    ) -> None:  # noqa: E501
        ...

    @validate_arguments
    def addressbook_address_key_city_head(
        self, address_key: StrictStr, async_req: Optional[bool] = None, **kwargs
    ) -> Union[None, Awaitable[None]]:  # noqa: E501
        """addressbook_address_key_city_head  # noqa: E501

        head operation for /addressbook/{address_key}/city  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.addressbook_address_key_city_head(address_key, async_req=True)
        >>> result = thread.get()

        :param address_key: (required)
        :type address_key: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            raise ValueError(
                "Error! Please call the addressbook_address_key_city_head_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            )
        if async_req is not None:
            kwargs["async_req"] = async_req
        return self.addressbook_address_key_city_head_with_http_info(
            address_key, **kwargs
        )  # noqa: E501

    @validate_arguments
    def addressbook_address_key_city_head_with_http_info(
        self, address_key: StrictStr, **kwargs
    ) -> ApiResponse:  # noqa: E501
        """addressbook_address_key_city_head  # noqa: E501

        head operation for /addressbook/{address_key}/city  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.addressbook_address_key_city_head_with_http_info(address_key, async_req=True)
        >>> result = thread.get()

        :param address_key: (required)
        :type address_key: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = ["address_key"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method addressbook_address_key_city_head" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["address_key"]:
            _path_params["address_key"] = _params["address_key"]

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = ["bearer_auth"]  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            "/addressbook/{address_key}/city",
            "HEAD",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @overload
    async def addressbook_address_key_city_put(
        self,
        address_key: StrictStr,
        addressbook: Annotated[
            Addressbook,
            Field(..., description="The request body for /addressbook/{address_key}/city"),
        ],
        **kwargs,
    ) -> str:  # noqa: E501
        ...

    @overload
    def addressbook_address_key_city_put(
        self,
        address_key: StrictStr,
        addressbook: Annotated[
            Addressbook,
            Field(..., description="The request body for /addressbook/{address_key}/city"),
        ],
        async_req: Optional[bool] = True,
        **kwargs,
    ) -> str:  # noqa: E501
        ...

    @validate_arguments
    def addressbook_address_key_city_put(
        self,
        address_key: StrictStr,
        addressbook: Annotated[
            Addressbook,
            Field(..., description="The request body for /addressbook/{address_key}/city"),
        ],
        async_req: Optional[bool] = None,
        **kwargs,
    ) -> Union[str, Awaitable[str]]:  # noqa: E501
        """addressbook_address_key_city_put  # noqa: E501

        put operation for /addressbook/{address_key}/city  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.addressbook_address_key_city_put(address_key, addressbook, async_req=True)
        >>> result = thread.get()

        :param address_key: (required)
        :type address_key: str
        :param addressbook: The request body for /addressbook/{address_key}/city (required)
        :type addressbook: Addressbook
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: str
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            raise ValueError(
                "Error! Please call the addressbook_address_key_city_put_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            )
        if async_req is not None:
            kwargs["async_req"] = async_req
        return self.addressbook_address_key_city_put_with_http_info(
            address_key, addressbook, **kwargs
        )  # noqa: E501

    @validate_arguments
    def addressbook_address_key_city_put_with_http_info(
        self,
        address_key: StrictStr,
        addressbook: Annotated[
            Addressbook,
            Field(..., description="The request body for /addressbook/{address_key}/city"),
        ],
        **kwargs,
    ) -> ApiResponse:  # noqa: E501
        """addressbook_address_key_city_put  # noqa: E501

        put operation for /addressbook/{address_key}/city  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.addressbook_address_key_city_put_with_http_info(address_key, addressbook, async_req=True)
        >>> result = thread.get()

        :param address_key: (required)
        :type address_key: str
        :param addressbook: The request body for /addressbook/{address_key}/city (required)
        :type addressbook: Addressbook
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(str, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["address_key", "addressbook"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method addressbook_address_key_city_put" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["address_key"]:
            _path_params["address_key"] = _params["address_key"]

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params["addressbook"] is not None:
            _body_params = _params["addressbook"]

        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get(
            "_content_type", self.api_client.select_header_content_type(["application/json"])
        )
        if _content_types_list:
            _header_params["Content-Type"] = _content_types_list

        # authentication setting
        _auth_settings = ["bearer_auth"]  # noqa: E501

        _response_types_map = {
            "200": "str",
        }

        return self.api_client.call_api(
            "/addressbook/{address_key}/city",
            "PUT",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @overload
    async def addressbook_address_key_country_delete(
        self, address_key: StrictStr, **kwargs
    ) -> str:  # noqa: E501
        ...

    @overload
    def addressbook_address_key_country_delete(
        self, address_key: StrictStr, async_req: Optional[bool] = True, **kwargs
    ) -> str:  # noqa: E501
        ...

    @validate_arguments
    def addressbook_address_key_country_delete(
        self, address_key: StrictStr, async_req: Optional[bool] = None, **kwargs
    ) -> Union[str, Awaitable[str]]:  # noqa: E501
        """addressbook_address_key_country_delete  # noqa: E501

        delete operation for /addressbook/{address_key}/country  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.addressbook_address_key_country_delete(address_key, async_req=True)
        >>> result = thread.get()

        :param address_key: (required)
        :type address_key: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: str
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            raise ValueError(
                "Error! Please call the addressbook_address_key_country_delete_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            )
        if async_req is not None:
            kwargs["async_req"] = async_req
        return self.addressbook_address_key_country_delete_with_http_info(
            address_key, **kwargs
        )  # noqa: E501

    @validate_arguments
    def addressbook_address_key_country_delete_with_http_info(
        self, address_key: StrictStr, **kwargs
    ) -> ApiResponse:  # noqa: E501
        """addressbook_address_key_country_delete  # noqa: E501

        delete operation for /addressbook/{address_key}/country  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.addressbook_address_key_country_delete_with_http_info(address_key, async_req=True)
        >>> result = thread.get()

        :param address_key: (required)
        :type address_key: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(str, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["address_key"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method addressbook_address_key_country_delete" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["address_key"]:
            _path_params["address_key"] = _params["address_key"]

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # authentication setting
        _auth_settings = ["bearer_auth"]  # noqa: E501

        _response_types_map = {
            "200": "str",
        }

        return self.api_client.call_api(
            "/addressbook/{address_key}/country",
            "DELETE",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @overload
    async def addressbook_address_key_country_get(
        self,
        address_key: StrictStr,
        city: Annotated[Optional[StrictStr], Field(description="Filter by city name")] = None,
        **kwargs,
    ) -> str:  # noqa: E501
        ...

    @overload
    def addressbook_address_key_country_get(
        self,
        address_key: StrictStr,
        city: Annotated[Optional[StrictStr], Field(description="Filter by city name")] = None,
        async_req: Optional[bool] = True,
        **kwargs,
    ) -> str:  # noqa: E501
        ...

    @validate_arguments
    def addressbook_address_key_country_get(
        self,
        address_key: StrictStr,
        city: Annotated[Optional[StrictStr], Field(description="Filter by city name")] = None,
        async_req: Optional[bool] = None,
        **kwargs,
    ) -> Union[str, Awaitable[str]]:  # noqa: E501
        """addressbook_address_key_country_get  # noqa: E501

        get operation for /addressbook/{address_key}/country  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.addressbook_address_key_country_get(address_key, city, async_req=True)
        >>> result = thread.get()

        :param address_key: (required)
        :type address_key: str
        :param city: Filter by city name
        :type city: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: str
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            raise ValueError(
                "Error! Please call the addressbook_address_key_country_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            )
        if async_req is not None:
            kwargs["async_req"] = async_req
        return self.addressbook_address_key_country_get_with_http_info(
            address_key, city, **kwargs
        )  # noqa: E501

    @validate_arguments
    def addressbook_address_key_country_get_with_http_info(
        self,
        address_key: StrictStr,
        city: Annotated[Optional[StrictStr], Field(description="Filter by city name")] = None,
        **kwargs,
    ) -> ApiResponse:  # noqa: E501
        """addressbook_address_key_country_get  # noqa: E501

        get operation for /addressbook/{address_key}/country  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.addressbook_address_key_country_get_with_http_info(address_key, city, async_req=True)
        >>> result = thread.get()

        :param address_key: (required)
        :type address_key: str
        :param city: Filter by city name
        :type city: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(str, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["address_key", "city"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method addressbook_address_key_country_get" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["address_key"]:
            _path_params["address_key"] = _params["address_key"]

        # process the query parameters
        _query_params = []
        if _params.get("city") is not None:  # noqa: E501
            _query_params.append(("city", _params["city"]))

        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # authentication setting
        _auth_settings = ["bearer_auth"]  # noqa: E501

        _response_types_map = {
            "200": "str",
        }

        return self.api_client.call_api(
            "/addressbook/{address_key}/country",
            "GET",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @overload
    async def addressbook_address_key_country_head(
        self, address_key: StrictStr, **kwargs
    ) -> None:  # noqa: E501
        ...

    @overload
    def addressbook_address_key_country_head(
        self, address_key: StrictStr, async_req: Optional[bool] = True, **kwargs
    ) -> None:  # noqa: E501
        ...

    @validate_arguments
    def addressbook_address_key_country_head(
        self, address_key: StrictStr, async_req: Optional[bool] = None, **kwargs
    ) -> Union[None, Awaitable[None]]:  # noqa: E501
        """addressbook_address_key_country_head  # noqa: E501

        head operation for /addressbook/{address_key}/country  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.addressbook_address_key_country_head(address_key, async_req=True)
        >>> result = thread.get()

        :param address_key: (required)
        :type address_key: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            raise ValueError(
                "Error! Please call the addressbook_address_key_country_head_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            )
        if async_req is not None:
            kwargs["async_req"] = async_req
        return self.addressbook_address_key_country_head_with_http_info(
            address_key, **kwargs
        )  # noqa: E501

    @validate_arguments
    def addressbook_address_key_country_head_with_http_info(
        self, address_key: StrictStr, **kwargs
    ) -> ApiResponse:  # noqa: E501
        """addressbook_address_key_country_head  # noqa: E501

        head operation for /addressbook/{address_key}/country  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.addressbook_address_key_country_head_with_http_info(address_key, async_req=True)
        >>> result = thread.get()

        :param address_key: (required)
        :type address_key: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = ["address_key"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method addressbook_address_key_country_head" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["address_key"]:
            _path_params["address_key"] = _params["address_key"]

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = ["bearer_auth"]  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            "/addressbook/{address_key}/country",
            "HEAD",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @overload
    async def addressbook_address_key_country_put(
        self,
        address_key: StrictStr,
        addressbook: Annotated[
            Addressbook,
            Field(..., description="The request body for /addressbook/{address_key}/country"),
        ],
        **kwargs,
    ) -> str:  # noqa: E501
        ...

    @overload
    def addressbook_address_key_country_put(
        self,
        address_key: StrictStr,
        addressbook: Annotated[
            Addressbook,
            Field(..., description="The request body for /addressbook/{address_key}/country"),
        ],
        async_req: Optional[bool] = True,
        **kwargs,
    ) -> str:  # noqa: E501
        ...

    @validate_arguments
    def addressbook_address_key_country_put(
        self,
        address_key: StrictStr,
        addressbook: Annotated[
            Addressbook,
            Field(..., description="The request body for /addressbook/{address_key}/country"),
        ],
        async_req: Optional[bool] = None,
        **kwargs,
    ) -> Union[str, Awaitable[str]]:  # noqa: E501
        """addressbook_address_key_country_put  # noqa: E501

        put operation for /addressbook/{address_key}/country  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.addressbook_address_key_country_put(address_key, addressbook, async_req=True)
        >>> result = thread.get()

        :param address_key: (required)
        :type address_key: str
        :param addressbook: The request body for /addressbook/{address_key}/country (required)
        :type addressbook: Addressbook
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: str
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            raise ValueError(
                "Error! Please call the addressbook_address_key_country_put_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            )
        if async_req is not None:
            kwargs["async_req"] = async_req
        return self.addressbook_address_key_country_put_with_http_info(
            address_key, addressbook, **kwargs
        )  # noqa: E501

    @validate_arguments
    def addressbook_address_key_country_put_with_http_info(
        self,
        address_key: StrictStr,
        addressbook: Annotated[
            Addressbook,
            Field(..., description="The request body for /addressbook/{address_key}/country"),
        ],
        **kwargs,
    ) -> ApiResponse:  # noqa: E501
        """addressbook_address_key_country_put  # noqa: E501

        put operation for /addressbook/{address_key}/country  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.addressbook_address_key_country_put_with_http_info(address_key, addressbook, async_req=True)
        >>> result = thread.get()

        :param address_key: (required)
        :type address_key: str
        :param addressbook: The request body for /addressbook/{address_key}/country (required)
        :type addressbook: Addressbook
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(str, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["address_key", "addressbook"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method addressbook_address_key_country_put" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["address_key"]:
            _path_params["address_key"] = _params["address_key"]

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params["addressbook"] is not None:
            _body_params = _params["addressbook"]

        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get(
            "_content_type", self.api_client.select_header_content_type(["application/json"])
        )
        if _content_types_list:
            _header_params["Content-Type"] = _content_types_list

        # authentication setting
        _auth_settings = ["bearer_auth"]  # noqa: E501

        _response_types_map = {
            "200": "str",
        }

        return self.api_client.call_api(
            "/addressbook/{address_key}/country",
            "PUT",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @overload
    async def addressbook_address_key_delete(
        self, address_key: StrictStr, **kwargs
    ) -> Addressbook:  # noqa: E501
        ...

    @overload
    def addressbook_address_key_delete(
        self, address_key: StrictStr, async_req: Optional[bool] = True, **kwargs
    ) -> Addressbook:  # noqa: E501
        ...

    @validate_arguments
    def addressbook_address_key_delete(
        self, address_key: StrictStr, async_req: Optional[bool] = None, **kwargs
    ) -> Union[Addressbook, Awaitable[Addressbook]]:  # noqa: E501
        """addressbook_address_key_delete  # noqa: E501

        Delete an address from this addressbook.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.addressbook_address_key_delete(address_key, async_req=True)
        >>> result = thread.get()

        :param address_key: (required)
        :type address_key: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Addressbook
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            raise ValueError(
                "Error! Please call the addressbook_address_key_delete_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            )
        if async_req is not None:
            kwargs["async_req"] = async_req
        return self.addressbook_address_key_delete_with_http_info(
            address_key, **kwargs
        )  # noqa: E501

    @validate_arguments
    def addressbook_address_key_delete_with_http_info(
        self, address_key: StrictStr, **kwargs
    ) -> ApiResponse:  # noqa: E501
        """addressbook_address_key_delete  # noqa: E501

        Delete an address from this addressbook.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.addressbook_address_key_delete_with_http_info(address_key, async_req=True)
        >>> result = thread.get()

        :param address_key: (required)
        :type address_key: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Addressbook, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["address_key"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method addressbook_address_key_delete" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["address_key"]:
            _path_params["address_key"] = _params["address_key"]

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # authentication setting
        _auth_settings = ["bearer_auth"]  # noqa: E501

        _response_types_map = {
            "200": "Addressbook",
        }

        return self.api_client.call_api(
            "/addressbook/{address_key}",
            "DELETE",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @overload
    async def addressbook_address_key_get(
        self,
        address_key: StrictStr,
        city: Annotated[Optional[StrictStr], Field(description="Filter by city name")] = None,
        **kwargs,
    ) -> Addressbook:  # noqa: E501
        ...

    @overload
    def addressbook_address_key_get(
        self,
        address_key: StrictStr,
        city: Annotated[Optional[StrictStr], Field(description="Filter by city name")] = None,
        async_req: Optional[bool] = True,
        **kwargs,
    ) -> Addressbook:  # noqa: E501
        ...

    @validate_arguments
    def addressbook_address_key_get(
        self,
        address_key: StrictStr,
        city: Annotated[Optional[StrictStr], Field(description="Filter by city name")] = None,
        async_req: Optional[bool] = None,
        **kwargs,
    ) -> Union[Addressbook, Awaitable[Addressbook]]:  # noqa: E501
        """addressbook_address_key_get  # noqa: E501

        Get a specific address from this addressbook.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.addressbook_address_key_get(address_key, city, async_req=True)
        >>> result = thread.get()

        :param address_key: (required)
        :type address_key: str
        :param city: Filter by city name
        :type city: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Addressbook
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            raise ValueError(
                "Error! Please call the addressbook_address_key_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            )
        if async_req is not None:
            kwargs["async_req"] = async_req
        return self.addressbook_address_key_get_with_http_info(
            address_key, city, **kwargs
        )  # noqa: E501

    @validate_arguments
    def addressbook_address_key_get_with_http_info(
        self,
        address_key: StrictStr,
        city: Annotated[Optional[StrictStr], Field(description="Filter by city name")] = None,
        **kwargs,
    ) -> ApiResponse:  # noqa: E501
        """addressbook_address_key_get  # noqa: E501

        Get a specific address from this addressbook.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.addressbook_address_key_get_with_http_info(address_key, city, async_req=True)
        >>> result = thread.get()

        :param address_key: (required)
        :type address_key: str
        :param city: Filter by city name
        :type city: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Addressbook, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["address_key", "city"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method addressbook_address_key_get" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["address_key"]:
            _path_params["address_key"] = _params["address_key"]

        # process the query parameters
        _query_params = []
        if _params.get("city") is not None:  # noqa: E501
            _query_params.append(("city", _params["city"]))

        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # authentication setting
        _auth_settings = ["bearer_auth"]  # noqa: E501

        _response_types_map = {
            "200": "Addressbook",
        }

        return self.api_client.call_api(
            "/addressbook/{address_key}",
            "GET",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @overload
    async def addressbook_address_key_head(
        self, address_key: StrictStr, **kwargs
    ) -> None:  # noqa: E501
        ...

    @overload
    def addressbook_address_key_head(
        self, address_key: StrictStr, async_req: Optional[bool] = True, **kwargs
    ) -> None:  # noqa: E501
        ...

    @validate_arguments
    def addressbook_address_key_head(
        self, address_key: StrictStr, async_req: Optional[bool] = None, **kwargs
    ) -> Union[None, Awaitable[None]]:  # noqa: E501
        """addressbook_address_key_head  # noqa: E501

        Determine the existence and size of this address.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.addressbook_address_key_head(address_key, async_req=True)
        >>> result = thread.get()

        :param address_key: (required)
        :type address_key: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            raise ValueError(
                "Error! Please call the addressbook_address_key_head_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            )
        if async_req is not None:
            kwargs["async_req"] = async_req
        return self.addressbook_address_key_head_with_http_info(address_key, **kwargs)  # noqa: E501

    @validate_arguments
    def addressbook_address_key_head_with_http_info(
        self, address_key: StrictStr, **kwargs
    ) -> ApiResponse:  # noqa: E501
        """addressbook_address_key_head  # noqa: E501

        Determine the existence and size of this address.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.addressbook_address_key_head_with_http_info(address_key, async_req=True)
        >>> result = thread.get()

        :param address_key: (required)
        :type address_key: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = ["address_key"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method addressbook_address_key_head" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["address_key"]:
            _path_params["address_key"] = _params["address_key"]

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = ["bearer_auth"]  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            "/addressbook/{address_key}",
            "HEAD",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @overload
    async def addressbook_address_key_people_delete(
        self, address_key: StrictStr, **kwargs
    ) -> List[str]:  # noqa: E501
        ...

    @overload
    def addressbook_address_key_people_delete(
        self, address_key: StrictStr, async_req: Optional[bool] = True, **kwargs
    ) -> List[str]:  # noqa: E501
        ...

    @validate_arguments
    def addressbook_address_key_people_delete(
        self, address_key: StrictStr, async_req: Optional[bool] = None, **kwargs
    ) -> Union[List[str], Awaitable[List[str]]]:  # noqa: E501
        """addressbook_address_key_people_delete  # noqa: E501

        delete operation for /addressbook/{address_key}/people  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.addressbook_address_key_people_delete(address_key, async_req=True)
        >>> result = thread.get()

        :param address_key: (required)
        :type address_key: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[str]
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            raise ValueError(
                "Error! Please call the addressbook_address_key_people_delete_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            )
        if async_req is not None:
            kwargs["async_req"] = async_req
        return self.addressbook_address_key_people_delete_with_http_info(
            address_key, **kwargs
        )  # noqa: E501

    @validate_arguments
    def addressbook_address_key_people_delete_with_http_info(
        self, address_key: StrictStr, **kwargs
    ) -> ApiResponse:  # noqa: E501
        """addressbook_address_key_people_delete  # noqa: E501

        delete operation for /addressbook/{address_key}/people  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.addressbook_address_key_people_delete_with_http_info(address_key, async_req=True)
        >>> result = thread.get()

        :param address_key: (required)
        :type address_key: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[str], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["address_key"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method addressbook_address_key_people_delete" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["address_key"]:
            _path_params["address_key"] = _params["address_key"]

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # authentication setting
        _auth_settings = ["bearer_auth"]  # noqa: E501

        _response_types_map = {
            "200": "List[str]",
        }

        return self.api_client.call_api(
            "/addressbook/{address_key}/people",
            "DELETE",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @overload
    async def addressbook_address_key_people_get(
        self,
        address_key: StrictStr,
        city: Annotated[Optional[StrictStr], Field(description="Filter by city name")] = None,
        **kwargs,
    ) -> List[str]:  # noqa: E501
        ...

    @overload
    def addressbook_address_key_people_get(
        self,
        address_key: StrictStr,
        city: Annotated[Optional[StrictStr], Field(description="Filter by city name")] = None,
        async_req: Optional[bool] = True,
        **kwargs,
    ) -> List[str]:  # noqa: E501
        ...

    @validate_arguments
    def addressbook_address_key_people_get(
        self,
        address_key: StrictStr,
        city: Annotated[Optional[StrictStr], Field(description="Filter by city name")] = None,
        async_req: Optional[bool] = None,
        **kwargs,
    ) -> Union[List[str], Awaitable[List[str]]]:  # noqa: E501
        """addressbook_address_key_people_get  # noqa: E501

        get operation for /addressbook/{address_key}/people  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.addressbook_address_key_people_get(address_key, city, async_req=True)
        >>> result = thread.get()

        :param address_key: (required)
        :type address_key: str
        :param city: Filter by city name
        :type city: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[str]
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            raise ValueError(
                "Error! Please call the addressbook_address_key_people_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            )
        if async_req is not None:
            kwargs["async_req"] = async_req
        return self.addressbook_address_key_people_get_with_http_info(
            address_key, city, **kwargs
        )  # noqa: E501

    @validate_arguments
    def addressbook_address_key_people_get_with_http_info(
        self,
        address_key: StrictStr,
        city: Annotated[Optional[StrictStr], Field(description="Filter by city name")] = None,
        **kwargs,
    ) -> ApiResponse:  # noqa: E501
        """addressbook_address_key_people_get  # noqa: E501

        get operation for /addressbook/{address_key}/people  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.addressbook_address_key_people_get_with_http_info(address_key, city, async_req=True)
        >>> result = thread.get()

        :param address_key: (required)
        :type address_key: str
        :param city: Filter by city name
        :type city: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[str], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["address_key", "city"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method addressbook_address_key_people_get" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["address_key"]:
            _path_params["address_key"] = _params["address_key"]

        # process the query parameters
        _query_params = []
        if _params.get("city") is not None:  # noqa: E501
            _query_params.append(("city", _params["city"]))

        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # authentication setting
        _auth_settings = ["bearer_auth"]  # noqa: E501

        _response_types_map = {
            "200": "List[str]",
        }

        return self.api_client.call_api(
            "/addressbook/{address_key}/people",
            "GET",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @overload
    async def addressbook_address_key_people_head(
        self, address_key: StrictStr, **kwargs
    ) -> None:  # noqa: E501
        ...

    @overload
    def addressbook_address_key_people_head(
        self, address_key: StrictStr, async_req: Optional[bool] = True, **kwargs
    ) -> None:  # noqa: E501
        ...

    @validate_arguments
    def addressbook_address_key_people_head(
        self, address_key: StrictStr, async_req: Optional[bool] = None, **kwargs
    ) -> Union[None, Awaitable[None]]:  # noqa: E501
        """addressbook_address_key_people_head  # noqa: E501

        head operation for /addressbook/{address_key}/people  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.addressbook_address_key_people_head(address_key, async_req=True)
        >>> result = thread.get()

        :param address_key: (required)
        :type address_key: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            raise ValueError(
                "Error! Please call the addressbook_address_key_people_head_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            )
        if async_req is not None:
            kwargs["async_req"] = async_req
        return self.addressbook_address_key_people_head_with_http_info(
            address_key, **kwargs
        )  # noqa: E501

    @validate_arguments
    def addressbook_address_key_people_head_with_http_info(
        self, address_key: StrictStr, **kwargs
    ) -> ApiResponse:  # noqa: E501
        """addressbook_address_key_people_head  # noqa: E501

        head operation for /addressbook/{address_key}/people  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.addressbook_address_key_people_head_with_http_info(address_key, async_req=True)
        >>> result = thread.get()

        :param address_key: (required)
        :type address_key: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = ["address_key"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method addressbook_address_key_people_head" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["address_key"]:
            _path_params["address_key"] = _params["address_key"]

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = ["bearer_auth"]  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            "/addressbook/{address_key}/people",
            "HEAD",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @overload
    async def addressbook_address_key_people_put(
        self,
        address_key: StrictStr,
        addressbook: Annotated[
            Addressbook,
            Field(..., description="The request body for /addressbook/{address_key}/people"),
        ],
        **kwargs,
    ) -> List[str]:  # noqa: E501
        ...

    @overload
    def addressbook_address_key_people_put(
        self,
        address_key: StrictStr,
        addressbook: Annotated[
            Addressbook,
            Field(..., description="The request body for /addressbook/{address_key}/people"),
        ],
        async_req: Optional[bool] = True,
        **kwargs,
    ) -> List[str]:  # noqa: E501
        ...

    @validate_arguments
    def addressbook_address_key_people_put(
        self,
        address_key: StrictStr,
        addressbook: Annotated[
            Addressbook,
            Field(..., description="The request body for /addressbook/{address_key}/people"),
        ],
        async_req: Optional[bool] = None,
        **kwargs,
    ) -> Union[List[str], Awaitable[List[str]]]:  # noqa: E501
        """addressbook_address_key_people_put  # noqa: E501

        put operation for /addressbook/{address_key}/people  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.addressbook_address_key_people_put(address_key, addressbook, async_req=True)
        >>> result = thread.get()

        :param address_key: (required)
        :type address_key: str
        :param addressbook: The request body for /addressbook/{address_key}/people (required)
        :type addressbook: Addressbook
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[str]
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            raise ValueError(
                "Error! Please call the addressbook_address_key_people_put_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            )
        if async_req is not None:
            kwargs["async_req"] = async_req
        return self.addressbook_address_key_people_put_with_http_info(
            address_key, addressbook, **kwargs
        )  # noqa: E501

    @validate_arguments
    def addressbook_address_key_people_put_with_http_info(
        self,
        address_key: StrictStr,
        addressbook: Annotated[
            Addressbook,
            Field(..., description="The request body for /addressbook/{address_key}/people"),
        ],
        **kwargs,
    ) -> ApiResponse:  # noqa: E501
        """addressbook_address_key_people_put  # noqa: E501

        put operation for /addressbook/{address_key}/people  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.addressbook_address_key_people_put_with_http_info(address_key, addressbook, async_req=True)
        >>> result = thread.get()

        :param address_key: (required)
        :type address_key: str
        :param addressbook: The request body for /addressbook/{address_key}/people (required)
        :type addressbook: Addressbook
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[str], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["address_key", "addressbook"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method addressbook_address_key_people_put" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["address_key"]:
            _path_params["address_key"] = _params["address_key"]

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params["addressbook"] is not None:
            _body_params = _params["addressbook"]

        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get(
            "_content_type", self.api_client.select_header_content_type(["application/json"])
        )
        if _content_types_list:
            _header_params["Content-Type"] = _content_types_list

        # authentication setting
        _auth_settings = ["bearer_auth"]  # noqa: E501

        _response_types_map = {
            "200": "List[str]",
        }

        return self.api_client.call_api(
            "/addressbook/{address_key}/people",
            "PUT",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @overload
    async def addressbook_address_key_person_delete(
        self,
        address_key: StrictStr,
        limit: Annotated[
            Optional[StrictInt], Field(description="Limit the number of responses back")
        ] = None,
        offset: Annotated[
            Optional[StrictInt], Field(description="The offset to start returning resources")
        ] = None,
        **kwargs,
    ) -> Person:  # noqa: E501
        ...

    @overload
    def addressbook_address_key_person_delete(
        self,
        address_key: StrictStr,
        limit: Annotated[
            Optional[StrictInt], Field(description="Limit the number of responses back")
        ] = None,
        offset: Annotated[
            Optional[StrictInt], Field(description="The offset to start returning resources")
        ] = None,
        async_req: Optional[bool] = True,
        **kwargs,
    ) -> Person:  # noqa: E501
        ...

    @validate_arguments
    def addressbook_address_key_person_delete(
        self,
        address_key: StrictStr,
        limit: Annotated[
            Optional[StrictInt], Field(description="Limit the number of responses back")
        ] = None,
        offset: Annotated[
            Optional[StrictInt], Field(description="The offset to start returning resources")
        ] = None,
        async_req: Optional[bool] = None,
        **kwargs,
    ) -> Union[Person, Awaitable[Person]]:  # noqa: E501
        """addressbook_address_key_person_delete  # noqa: E501

        delete operation for /addressbook/{address_key}/person  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.addressbook_address_key_person_delete(address_key, limit, offset, async_req=True)
        >>> result = thread.get()

        :param address_key: (required)
        :type address_key: str
        :param limit: Limit the number of responses back
        :type limit: int
        :param offset: The offset to start returning resources
        :type offset: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Person
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            raise ValueError(
                "Error! Please call the addressbook_address_key_person_delete_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            )
        if async_req is not None:
            kwargs["async_req"] = async_req
        return self.addressbook_address_key_person_delete_with_http_info(
            address_key, limit, offset, **kwargs
        )  # noqa: E501

    @validate_arguments
    def addressbook_address_key_person_delete_with_http_info(
        self,
        address_key: StrictStr,
        limit: Annotated[
            Optional[StrictInt], Field(description="Limit the number of responses back")
        ] = None,
        offset: Annotated[
            Optional[StrictInt], Field(description="The offset to start returning resources")
        ] = None,
        **kwargs,
    ) -> ApiResponse:  # noqa: E501
        """addressbook_address_key_person_delete  # noqa: E501

        delete operation for /addressbook/{address_key}/person  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.addressbook_address_key_person_delete_with_http_info(address_key, limit, offset, async_req=True)
        >>> result = thread.get()

        :param address_key: (required)
        :type address_key: str
        :param limit: Limit the number of responses back
        :type limit: int
        :param offset: The offset to start returning resources
        :type offset: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Person, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["address_key", "limit", "offset"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method addressbook_address_key_person_delete" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["address_key"]:
            _path_params["address_key"] = _params["address_key"]

        # process the query parameters
        _query_params = []
        if _params.get("limit") is not None:  # noqa: E501
            _query_params.append(("limit", _params["limit"]))

        if _params.get("offset") is not None:  # noqa: E501
            _query_params.append(("offset", _params["offset"]))

        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # authentication setting
        _auth_settings = ["bearer_auth"]  # noqa: E501

        _response_types_map = {
            "200": "Person",
        }

        return self.api_client.call_api(
            "/addressbook/{address_key}/person",
            "DELETE",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @overload
    async def addressbook_address_key_person_get(
        self,
        address_key: StrictStr,
        last_name: Annotated[Optional[StrictStr], Field(description="Filter by last name")] = None,
        limit: Annotated[
            Optional[StrictInt], Field(description="Limit the number of responses back")
        ] = None,
        offset: Annotated[
            Optional[StrictInt], Field(description="The offset to start returning resources")
        ] = None,
        **kwargs,
    ) -> List[Person]:  # noqa: E501
        ...

    @overload
    def addressbook_address_key_person_get(
        self,
        address_key: StrictStr,
        last_name: Annotated[Optional[StrictStr], Field(description="Filter by last name")] = None,
        limit: Annotated[
            Optional[StrictInt], Field(description="Limit the number of responses back")
        ] = None,
        offset: Annotated[
            Optional[StrictInt], Field(description="The offset to start returning resources")
        ] = None,
        async_req: Optional[bool] = True,
        **kwargs,
    ) -> List[Person]:  # noqa: E501
        ...

    @validate_arguments
    def addressbook_address_key_person_get(
        self,
        address_key: StrictStr,
        last_name: Annotated[Optional[StrictStr], Field(description="Filter by last name")] = None,
        limit: Annotated[
            Optional[StrictInt], Field(description="Limit the number of responses back")
        ] = None,
        offset: Annotated[
            Optional[StrictInt], Field(description="The offset to start returning resources")
        ] = None,
        async_req: Optional[bool] = None,
        **kwargs,
    ) -> Union[List[Person], Awaitable[List[Person]]]:  # noqa: E501
        """addressbook_address_key_person_get  # noqa: E501

        get operation for /addressbook/{address_key}/person  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.addressbook_address_key_person_get(address_key, last_name, limit, offset, async_req=True)
        >>> result = thread.get()

        :param address_key: (required)
        :type address_key: str
        :param last_name: Filter by last name
        :type last_name: str
        :param limit: Limit the number of responses back
        :type limit: int
        :param offset: The offset to start returning resources
        :type offset: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[Person]
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            raise ValueError(
                "Error! Please call the addressbook_address_key_person_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            )
        if async_req is not None:
            kwargs["async_req"] = async_req
        return self.addressbook_address_key_person_get_with_http_info(
            address_key, last_name, limit, offset, **kwargs
        )  # noqa: E501

    @validate_arguments
    def addressbook_address_key_person_get_with_http_info(
        self,
        address_key: StrictStr,
        last_name: Annotated[Optional[StrictStr], Field(description="Filter by last name")] = None,
        limit: Annotated[
            Optional[StrictInt], Field(description="Limit the number of responses back")
        ] = None,
        offset: Annotated[
            Optional[StrictInt], Field(description="The offset to start returning resources")
        ] = None,
        **kwargs,
    ) -> ApiResponse:  # noqa: E501
        """addressbook_address_key_person_get  # noqa: E501

        get operation for /addressbook/{address_key}/person  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.addressbook_address_key_person_get_with_http_info(address_key, last_name, limit, offset, async_req=True)
        >>> result = thread.get()

        :param address_key: (required)
        :type address_key: str
        :param last_name: Filter by last name
        :type last_name: str
        :param limit: Limit the number of responses back
        :type limit: int
        :param offset: The offset to start returning resources
        :type offset: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[Person], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["address_key", "last_name", "limit", "offset"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method addressbook_address_key_person_get" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["address_key"]:
            _path_params["address_key"] = _params["address_key"]

        # process the query parameters
        _query_params = []
        if _params.get("last_name") is not None:  # noqa: E501
            _query_params.append(("last_name", _params["last_name"]))

        if _params.get("limit") is not None:  # noqa: E501
            _query_params.append(("limit", _params["limit"]))

        if _params.get("offset") is not None:  # noqa: E501
            _query_params.append(("offset", _params["offset"]))

        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # authentication setting
        _auth_settings = ["bearer_auth"]  # noqa: E501

        _response_types_map = {
            "200": "List[Person]",
        }

        return self.api_client.call_api(
            "/addressbook/{address_key}/person",
            "GET",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @overload
    async def addressbook_address_key_person_head(
        self,
        address_key: StrictStr,
        limit: Annotated[
            Optional[StrictInt], Field(description="Limit the number of responses back")
        ] = None,
        offset: Annotated[
            Optional[StrictInt], Field(description="The offset to start returning resources")
        ] = None,
        **kwargs,
    ) -> None:  # noqa: E501
        ...

    @overload
    def addressbook_address_key_person_head(
        self,
        address_key: StrictStr,
        limit: Annotated[
            Optional[StrictInt], Field(description="Limit the number of responses back")
        ] = None,
        offset: Annotated[
            Optional[StrictInt], Field(description="The offset to start returning resources")
        ] = None,
        async_req: Optional[bool] = True,
        **kwargs,
    ) -> None:  # noqa: E501
        ...

    @validate_arguments
    def addressbook_address_key_person_head(
        self,
        address_key: StrictStr,
        limit: Annotated[
            Optional[StrictInt], Field(description="Limit the number of responses back")
        ] = None,
        offset: Annotated[
            Optional[StrictInt], Field(description="The offset to start returning resources")
        ] = None,
        async_req: Optional[bool] = None,
        **kwargs,
    ) -> Union[None, Awaitable[None]]:  # noqa: E501
        """addressbook_address_key_person_head  # noqa: E501

        head operation for /addressbook/{address_key}/person  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.addressbook_address_key_person_head(address_key, limit, offset, async_req=True)
        >>> result = thread.get()

        :param address_key: (required)
        :type address_key: str
        :param limit: Limit the number of responses back
        :type limit: int
        :param offset: The offset to start returning resources
        :type offset: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            raise ValueError(
                "Error! Please call the addressbook_address_key_person_head_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            )
        if async_req is not None:
            kwargs["async_req"] = async_req
        return self.addressbook_address_key_person_head_with_http_info(
            address_key, limit, offset, **kwargs
        )  # noqa: E501

    @validate_arguments
    def addressbook_address_key_person_head_with_http_info(
        self,
        address_key: StrictStr,
        limit: Annotated[
            Optional[StrictInt], Field(description="Limit the number of responses back")
        ] = None,
        offset: Annotated[
            Optional[StrictInt], Field(description="The offset to start returning resources")
        ] = None,
        **kwargs,
    ) -> ApiResponse:  # noqa: E501
        """addressbook_address_key_person_head  # noqa: E501

        head operation for /addressbook/{address_key}/person  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.addressbook_address_key_person_head_with_http_info(address_key, limit, offset, async_req=True)
        >>> result = thread.get()

        :param address_key: (required)
        :type address_key: str
        :param limit: Limit the number of responses back
        :type limit: int
        :param offset: The offset to start returning resources
        :type offset: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = ["address_key", "limit", "offset"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method addressbook_address_key_person_head" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["address_key"]:
            _path_params["address_key"] = _params["address_key"]

        # process the query parameters
        _query_params = []
        if _params.get("limit") is not None:  # noqa: E501
            _query_params.append(("limit", _params["limit"]))

        if _params.get("offset") is not None:  # noqa: E501
            _query_params.append(("offset", _params["offset"]))

        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = ["bearer_auth"]  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            "/addressbook/{address_key}/person",
            "HEAD",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @overload
    async def addressbook_address_key_person_patch(
        self,
        address_key: StrictStr,
        limit: Annotated[
            Optional[StrictInt], Field(description="Limit the number of responses back")
        ] = None,
        offset: Annotated[
            Optional[StrictInt], Field(description="The offset to start returning resources")
        ] = None,
        **kwargs,
    ) -> Person:  # noqa: E501
        ...

    @overload
    def addressbook_address_key_person_patch(
        self,
        address_key: StrictStr,
        limit: Annotated[
            Optional[StrictInt], Field(description="Limit the number of responses back")
        ] = None,
        offset: Annotated[
            Optional[StrictInt], Field(description="The offset to start returning resources")
        ] = None,
        async_req: Optional[bool] = True,
        **kwargs,
    ) -> Person:  # noqa: E501
        ...

    @validate_arguments
    def addressbook_address_key_person_patch(
        self,
        address_key: StrictStr,
        limit: Annotated[
            Optional[StrictInt], Field(description="Limit the number of responses back")
        ] = None,
        offset: Annotated[
            Optional[StrictInt], Field(description="The offset to start returning resources")
        ] = None,
        async_req: Optional[bool] = None,
        **kwargs,
    ) -> Union[Person, Awaitable[Person]]:  # noqa: E501
        """addressbook_address_key_person_patch  # noqa: E501

        patch operation for /addressbook/{address_key}/person  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.addressbook_address_key_person_patch(address_key, limit, offset, async_req=True)
        >>> result = thread.get()

        :param address_key: (required)
        :type address_key: str
        :param limit: Limit the number of responses back
        :type limit: int
        :param offset: The offset to start returning resources
        :type offset: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Person
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            raise ValueError(
                "Error! Please call the addressbook_address_key_person_patch_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            )
        if async_req is not None:
            kwargs["async_req"] = async_req
        return self.addressbook_address_key_person_patch_with_http_info(
            address_key, limit, offset, **kwargs
        )  # noqa: E501

    @validate_arguments
    def addressbook_address_key_person_patch_with_http_info(
        self,
        address_key: StrictStr,
        limit: Annotated[
            Optional[StrictInt], Field(description="Limit the number of responses back")
        ] = None,
        offset: Annotated[
            Optional[StrictInt], Field(description="The offset to start returning resources")
        ] = None,
        **kwargs,
    ) -> ApiResponse:  # noqa: E501
        """addressbook_address_key_person_patch  # noqa: E501

        patch operation for /addressbook/{address_key}/person  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.addressbook_address_key_person_patch_with_http_info(address_key, limit, offset, async_req=True)
        >>> result = thread.get()

        :param address_key: (required)
        :type address_key: str
        :param limit: Limit the number of responses back
        :type limit: int
        :param offset: The offset to start returning resources
        :type offset: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Person, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["address_key", "limit", "offset"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method addressbook_address_key_person_patch" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["address_key"]:
            _path_params["address_key"] = _params["address_key"]

        # process the query parameters
        _query_params = []
        if _params.get("limit") is not None:  # noqa: E501
            _query_params.append(("limit", _params["limit"]))

        if _params.get("offset") is not None:  # noqa: E501
            _query_params.append(("offset", _params["offset"]))

        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # authentication setting
        _auth_settings = ["bearer_auth"]  # noqa: E501

        _response_types_map = {
            "200": "Person",
        }

        return self.api_client.call_api(
            "/addressbook/{address_key}/person",
            "PATCH",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @overload
    async def addressbook_address_key_person_post(
        self,
        address_key: StrictStr,
        create_person: Annotated[
            CreatePerson,
            Field(..., description="The request body for /addressbook/{address_key}/person"),
        ],
        limit: Annotated[
            Optional[StrictInt], Field(description="Limit the number of responses back")
        ] = None,
        offset: Annotated[
            Optional[StrictInt], Field(description="The offset to start returning resources")
        ] = None,
        **kwargs,
    ) -> CreatePerson:  # noqa: E501
        ...

    @overload
    def addressbook_address_key_person_post(
        self,
        address_key: StrictStr,
        create_person: Annotated[
            CreatePerson,
            Field(..., description="The request body for /addressbook/{address_key}/person"),
        ],
        limit: Annotated[
            Optional[StrictInt], Field(description="Limit the number of responses back")
        ] = None,
        offset: Annotated[
            Optional[StrictInt], Field(description="The offset to start returning resources")
        ] = None,
        async_req: Optional[bool] = True,
        **kwargs,
    ) -> CreatePerson:  # noqa: E501
        ...

    @validate_arguments
    def addressbook_address_key_person_post(
        self,
        address_key: StrictStr,
        create_person: Annotated[
            CreatePerson,
            Field(..., description="The request body for /addressbook/{address_key}/person"),
        ],
        limit: Annotated[
            Optional[StrictInt], Field(description="Limit the number of responses back")
        ] = None,
        offset: Annotated[
            Optional[StrictInt], Field(description="The offset to start returning resources")
        ] = None,
        async_req: Optional[bool] = None,
        **kwargs,
    ) -> Union[CreatePerson, Awaitable[CreatePerson]]:  # noqa: E501
        """addressbook_address_key_person_post  # noqa: E501

        post operation for /addressbook/{address_key}/person  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.addressbook_address_key_person_post(address_key, create_person, limit, offset, async_req=True)
        >>> result = thread.get()

        :param address_key: (required)
        :type address_key: str
        :param create_person: The request body for /addressbook/{address_key}/person (required)
        :type create_person: CreatePerson
        :param limit: Limit the number of responses back
        :type limit: int
        :param offset: The offset to start returning resources
        :type offset: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: CreatePerson
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            raise ValueError(
                "Error! Please call the addressbook_address_key_person_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            )
        if async_req is not None:
            kwargs["async_req"] = async_req
        return self.addressbook_address_key_person_post_with_http_info(
            address_key, create_person, limit, offset, **kwargs
        )  # noqa: E501

    @validate_arguments
    def addressbook_address_key_person_post_with_http_info(
        self,
        address_key: StrictStr,
        create_person: Annotated[
            CreatePerson,
            Field(..., description="The request body for /addressbook/{address_key}/person"),
        ],
        limit: Annotated[
            Optional[StrictInt], Field(description="Limit the number of responses back")
        ] = None,
        offset: Annotated[
            Optional[StrictInt], Field(description="The offset to start returning resources")
        ] = None,
        **kwargs,
    ) -> ApiResponse:  # noqa: E501
        """addressbook_address_key_person_post  # noqa: E501

        post operation for /addressbook/{address_key}/person  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.addressbook_address_key_person_post_with_http_info(address_key, create_person, limit, offset, async_req=True)
        >>> result = thread.get()

        :param address_key: (required)
        :type address_key: str
        :param create_person: The request body for /addressbook/{address_key}/person (required)
        :type create_person: CreatePerson
        :param limit: Limit the number of responses back
        :type limit: int
        :param offset: The offset to start returning resources
        :type offset: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(CreatePerson, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["address_key", "create_person", "limit", "offset"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method addressbook_address_key_person_post" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["address_key"]:
            _path_params["address_key"] = _params["address_key"]

        # process the query parameters
        _query_params = []
        if _params.get("limit") is not None:  # noqa: E501
            _query_params.append(("limit", _params["limit"]))

        if _params.get("offset") is not None:  # noqa: E501
            _query_params.append(("offset", _params["offset"]))

        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params["create_person"] is not None:
            _body_params = _params["create_person"]

        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get(
            "_content_type", self.api_client.select_header_content_type(["application/json"])
        )
        if _content_types_list:
            _header_params["Content-Type"] = _content_types_list

        # authentication setting
        _auth_settings = ["bearer_auth"]  # noqa: E501

        _response_types_map = {
            "201": "CreatePerson",
        }

        return self.api_client.call_api(
            "/addressbook/{address_key}/person",
            "POST",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @overload
    async def addressbook_address_key_person_uuid_age_delete(
        self, address_key: StrictStr, uuid: StrictStr, **kwargs
    ) -> int:  # noqa: E501
        ...

    @overload
    def addressbook_address_key_person_uuid_age_delete(
        self, address_key: StrictStr, uuid: StrictStr, async_req: Optional[bool] = True, **kwargs
    ) -> int:  # noqa: E501
        ...

    @validate_arguments
    def addressbook_address_key_person_uuid_age_delete(
        self, address_key: StrictStr, uuid: StrictStr, async_req: Optional[bool] = None, **kwargs
    ) -> Union[int, Awaitable[int]]:  # noqa: E501
        """addressbook_address_key_person_uuid_age_delete  # noqa: E501

        delete operation for /addressbook/{address_key}/person/{uuid}/age  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.addressbook_address_key_person_uuid_age_delete(address_key, uuid, async_req=True)
        >>> result = thread.get()

        :param address_key: (required)
        :type address_key: str
        :param uuid: (required)
        :type uuid: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: int
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            raise ValueError(
                "Error! Please call the addressbook_address_key_person_uuid_age_delete_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            )
        if async_req is not None:
            kwargs["async_req"] = async_req
        return self.addressbook_address_key_person_uuid_age_delete_with_http_info(
            address_key, uuid, **kwargs
        )  # noqa: E501

    @validate_arguments
    def addressbook_address_key_person_uuid_age_delete_with_http_info(
        self, address_key: StrictStr, uuid: StrictStr, **kwargs
    ) -> ApiResponse:  # noqa: E501
        """addressbook_address_key_person_uuid_age_delete  # noqa: E501

        delete operation for /addressbook/{address_key}/person/{uuid}/age  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.addressbook_address_key_person_uuid_age_delete_with_http_info(address_key, uuid, async_req=True)
        >>> result = thread.get()

        :param address_key: (required)
        :type address_key: str
        :param uuid: (required)
        :type uuid: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(int, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["address_key", "uuid"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method addressbook_address_key_person_uuid_age_delete" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["address_key"]:
            _path_params["address_key"] = _params["address_key"]

        if _params["uuid"]:
            _path_params["uuid"] = _params["uuid"]

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # authentication setting
        _auth_settings = ["bearer_auth"]  # noqa: E501

        _response_types_map = {
            "200": "int",
        }

        return self.api_client.call_api(
            "/addressbook/{address_key}/person/{uuid}/age",
            "DELETE",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @overload
    async def addressbook_address_key_person_uuid_age_get(
        self,
        address_key: StrictStr,
        uuid: StrictStr,
        last_name: Annotated[Optional[StrictStr], Field(description="Filter by last name")] = None,
        **kwargs,
    ) -> int:  # noqa: E501
        ...

    @overload
    def addressbook_address_key_person_uuid_age_get(
        self,
        address_key: StrictStr,
        uuid: StrictStr,
        last_name: Annotated[Optional[StrictStr], Field(description="Filter by last name")] = None,
        async_req: Optional[bool] = True,
        **kwargs,
    ) -> int:  # noqa: E501
        ...

    @validate_arguments
    def addressbook_address_key_person_uuid_age_get(
        self,
        address_key: StrictStr,
        uuid: StrictStr,
        last_name: Annotated[Optional[StrictStr], Field(description="Filter by last name")] = None,
        async_req: Optional[bool] = None,
        **kwargs,
    ) -> Union[int, Awaitable[int]]:  # noqa: E501
        """addressbook_address_key_person_uuid_age_get  # noqa: E501

        get operation for /addressbook/{address_key}/person/{uuid}/age  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.addressbook_address_key_person_uuid_age_get(address_key, uuid, last_name, async_req=True)
        >>> result = thread.get()

        :param address_key: (required)
        :type address_key: str
        :param uuid: (required)
        :type uuid: str
        :param last_name: Filter by last name
        :type last_name: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: int
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            raise ValueError(
                "Error! Please call the addressbook_address_key_person_uuid_age_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            )
        if async_req is not None:
            kwargs["async_req"] = async_req
        return self.addressbook_address_key_person_uuid_age_get_with_http_info(
            address_key, uuid, last_name, **kwargs
        )  # noqa: E501

    @validate_arguments
    def addressbook_address_key_person_uuid_age_get_with_http_info(
        self,
        address_key: StrictStr,
        uuid: StrictStr,
        last_name: Annotated[Optional[StrictStr], Field(description="Filter by last name")] = None,
        **kwargs,
    ) -> ApiResponse:  # noqa: E501
        """addressbook_address_key_person_uuid_age_get  # noqa: E501

        get operation for /addressbook/{address_key}/person/{uuid}/age  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.addressbook_address_key_person_uuid_age_get_with_http_info(address_key, uuid, last_name, async_req=True)
        >>> result = thread.get()

        :param address_key: (required)
        :type address_key: str
        :param uuid: (required)
        :type uuid: str
        :param last_name: Filter by last name
        :type last_name: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(int, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["address_key", "uuid", "last_name"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method addressbook_address_key_person_uuid_age_get" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["address_key"]:
            _path_params["address_key"] = _params["address_key"]

        if _params["uuid"]:
            _path_params["uuid"] = _params["uuid"]

        # process the query parameters
        _query_params = []
        if _params.get("last_name") is not None:  # noqa: E501
            _query_params.append(("last_name", _params["last_name"]))

        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # authentication setting
        _auth_settings = ["bearer_auth"]  # noqa: E501

        _response_types_map = {
            "200": "int",
        }

        return self.api_client.call_api(
            "/addressbook/{address_key}/person/{uuid}/age",
            "GET",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @overload
    async def addressbook_address_key_person_uuid_age_head(
        self, address_key: StrictStr, uuid: StrictStr, **kwargs
    ) -> None:  # noqa: E501
        ...

    @overload
    def addressbook_address_key_person_uuid_age_head(
        self, address_key: StrictStr, uuid: StrictStr, async_req: Optional[bool] = True, **kwargs
    ) -> None:  # noqa: E501
        ...

    @validate_arguments
    def addressbook_address_key_person_uuid_age_head(
        self, address_key: StrictStr, uuid: StrictStr, async_req: Optional[bool] = None, **kwargs
    ) -> Union[None, Awaitable[None]]:  # noqa: E501
        """addressbook_address_key_person_uuid_age_head  # noqa: E501

        head operation for /addressbook/{address_key}/person/{uuid}/age  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.addressbook_address_key_person_uuid_age_head(address_key, uuid, async_req=True)
        >>> result = thread.get()

        :param address_key: (required)
        :type address_key: str
        :param uuid: (required)
        :type uuid: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            raise ValueError(
                "Error! Please call the addressbook_address_key_person_uuid_age_head_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            )
        if async_req is not None:
            kwargs["async_req"] = async_req
        return self.addressbook_address_key_person_uuid_age_head_with_http_info(
            address_key, uuid, **kwargs
        )  # noqa: E501

    @validate_arguments
    def addressbook_address_key_person_uuid_age_head_with_http_info(
        self, address_key: StrictStr, uuid: StrictStr, **kwargs
    ) -> ApiResponse:  # noqa: E501
        """addressbook_address_key_person_uuid_age_head  # noqa: E501

        head operation for /addressbook/{address_key}/person/{uuid}/age  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.addressbook_address_key_person_uuid_age_head_with_http_info(address_key, uuid, async_req=True)
        >>> result = thread.get()

        :param address_key: (required)
        :type address_key: str
        :param uuid: (required)
        :type uuid: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = ["address_key", "uuid"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method addressbook_address_key_person_uuid_age_head" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["address_key"]:
            _path_params["address_key"] = _params["address_key"]

        if _params["uuid"]:
            _path_params["uuid"] = _params["uuid"]

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = ["bearer_auth"]  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            "/addressbook/{address_key}/person/{uuid}/age",
            "HEAD",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @overload
    async def addressbook_address_key_person_uuid_age_put(
        self,
        address_key: StrictStr,
        uuid: StrictStr,
        person: Annotated[
            Person,
            Field(
                ..., description="The request body for /addressbook/{address_key}/person/{uuid}/age"
            ),
        ],
        **kwargs,
    ) -> int:  # noqa: E501
        ...

    @overload
    def addressbook_address_key_person_uuid_age_put(
        self,
        address_key: StrictStr,
        uuid: StrictStr,
        person: Annotated[
            Person,
            Field(
                ..., description="The request body for /addressbook/{address_key}/person/{uuid}/age"
            ),
        ],
        async_req: Optional[bool] = True,
        **kwargs,
    ) -> int:  # noqa: E501
        ...

    @validate_arguments
    def addressbook_address_key_person_uuid_age_put(
        self,
        address_key: StrictStr,
        uuid: StrictStr,
        person: Annotated[
            Person,
            Field(
                ..., description="The request body for /addressbook/{address_key}/person/{uuid}/age"
            ),
        ],
        async_req: Optional[bool] = None,
        **kwargs,
    ) -> Union[int, Awaitable[int]]:  # noqa: E501
        """addressbook_address_key_person_uuid_age_put  # noqa: E501

        put operation for /addressbook/{address_key}/person/{uuid}/age  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.addressbook_address_key_person_uuid_age_put(address_key, uuid, person, async_req=True)
        >>> result = thread.get()

        :param address_key: (required)
        :type address_key: str
        :param uuid: (required)
        :type uuid: str
        :param person: The request body for /addressbook/{address_key}/person/{uuid}/age (required)
        :type person: Person
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: int
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            raise ValueError(
                "Error! Please call the addressbook_address_key_person_uuid_age_put_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            )
        if async_req is not None:
            kwargs["async_req"] = async_req
        return self.addressbook_address_key_person_uuid_age_put_with_http_info(
            address_key, uuid, person, **kwargs
        )  # noqa: E501

    @validate_arguments
    def addressbook_address_key_person_uuid_age_put_with_http_info(
        self,
        address_key: StrictStr,
        uuid: StrictStr,
        person: Annotated[
            Person,
            Field(
                ..., description="The request body for /addressbook/{address_key}/person/{uuid}/age"
            ),
        ],
        **kwargs,
    ) -> ApiResponse:  # noqa: E501
        """addressbook_address_key_person_uuid_age_put  # noqa: E501

        put operation for /addressbook/{address_key}/person/{uuid}/age  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.addressbook_address_key_person_uuid_age_put_with_http_info(address_key, uuid, person, async_req=True)
        >>> result = thread.get()

        :param address_key: (required)
        :type address_key: str
        :param uuid: (required)
        :type uuid: str
        :param person: The request body for /addressbook/{address_key}/person/{uuid}/age (required)
        :type person: Person
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(int, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["address_key", "uuid", "person"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method addressbook_address_key_person_uuid_age_put" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["address_key"]:
            _path_params["address_key"] = _params["address_key"]

        if _params["uuid"]:
            _path_params["uuid"] = _params["uuid"]

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params["person"] is not None:
            _body_params = _params["person"]

        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get(
            "_content_type", self.api_client.select_header_content_type(["application/json"])
        )
        if _content_types_list:
            _header_params["Content-Type"] = _content_types_list

        # authentication setting
        _auth_settings = ["bearer_auth"]  # noqa: E501

        _response_types_map = {
            "200": "int",
        }

        return self.api_client.call_api(
            "/addressbook/{address_key}/person/{uuid}/age",
            "PUT",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @overload
    async def addressbook_address_key_person_uuid_delete(
        self, address_key: StrictStr, uuid: StrictStr, **kwargs
    ) -> Person:  # noqa: E501
        ...

    @overload
    def addressbook_address_key_person_uuid_delete(
        self, address_key: StrictStr, uuid: StrictStr, async_req: Optional[bool] = True, **kwargs
    ) -> Person:  # noqa: E501
        ...

    @validate_arguments
    def addressbook_address_key_person_uuid_delete(
        self, address_key: StrictStr, uuid: StrictStr, async_req: Optional[bool] = None, **kwargs
    ) -> Union[Person, Awaitable[Person]]:  # noqa: E501
        """addressbook_address_key_person_uuid_delete  # noqa: E501

        delete operation for /addressbook/{address_key}/person/{uuid}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.addressbook_address_key_person_uuid_delete(address_key, uuid, async_req=True)
        >>> result = thread.get()

        :param address_key: (required)
        :type address_key: str
        :param uuid: (required)
        :type uuid: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Person
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            raise ValueError(
                "Error! Please call the addressbook_address_key_person_uuid_delete_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            )
        if async_req is not None:
            kwargs["async_req"] = async_req
        return self.addressbook_address_key_person_uuid_delete_with_http_info(
            address_key, uuid, **kwargs
        )  # noqa: E501

    @validate_arguments
    def addressbook_address_key_person_uuid_delete_with_http_info(
        self, address_key: StrictStr, uuid: StrictStr, **kwargs
    ) -> ApiResponse:  # noqa: E501
        """addressbook_address_key_person_uuid_delete  # noqa: E501

        delete operation for /addressbook/{address_key}/person/{uuid}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.addressbook_address_key_person_uuid_delete_with_http_info(address_key, uuid, async_req=True)
        >>> result = thread.get()

        :param address_key: (required)
        :type address_key: str
        :param uuid: (required)
        :type uuid: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Person, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["address_key", "uuid"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method addressbook_address_key_person_uuid_delete" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["address_key"]:
            _path_params["address_key"] = _params["address_key"]

        if _params["uuid"]:
            _path_params["uuid"] = _params["uuid"]

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # authentication setting
        _auth_settings = ["bearer_auth"]  # noqa: E501

        _response_types_map = {
            "200": "Person",
        }

        return self.api_client.call_api(
            "/addressbook/{address_key}/person/{uuid}",
            "DELETE",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @overload
    async def addressbook_address_key_person_uuid_first_name_delete(
        self, address_key: StrictStr, uuid: StrictStr, **kwargs
    ) -> str:  # noqa: E501
        ...

    @overload
    def addressbook_address_key_person_uuid_first_name_delete(
        self, address_key: StrictStr, uuid: StrictStr, async_req: Optional[bool] = True, **kwargs
    ) -> str:  # noqa: E501
        ...

    @validate_arguments
    def addressbook_address_key_person_uuid_first_name_delete(
        self, address_key: StrictStr, uuid: StrictStr, async_req: Optional[bool] = None, **kwargs
    ) -> Union[str, Awaitable[str]]:  # noqa: E501
        """addressbook_address_key_person_uuid_first_name_delete  # noqa: E501

        delete operation for /addressbook/{address_key}/person/{uuid}/first_name  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.addressbook_address_key_person_uuid_first_name_delete(address_key, uuid, async_req=True)
        >>> result = thread.get()

        :param address_key: (required)
        :type address_key: str
        :param uuid: (required)
        :type uuid: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: str
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            raise ValueError(
                "Error! Please call the addressbook_address_key_person_uuid_first_name_delete_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            )
        if async_req is not None:
            kwargs["async_req"] = async_req
        return self.addressbook_address_key_person_uuid_first_name_delete_with_http_info(
            address_key, uuid, **kwargs
        )  # noqa: E501

    @validate_arguments
    def addressbook_address_key_person_uuid_first_name_delete_with_http_info(
        self, address_key: StrictStr, uuid: StrictStr, **kwargs
    ) -> ApiResponse:  # noqa: E501
        """addressbook_address_key_person_uuid_first_name_delete  # noqa: E501

        delete operation for /addressbook/{address_key}/person/{uuid}/first_name  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.addressbook_address_key_person_uuid_first_name_delete_with_http_info(address_key, uuid, async_req=True)
        >>> result = thread.get()

        :param address_key: (required)
        :type address_key: str
        :param uuid: (required)
        :type uuid: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(str, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["address_key", "uuid"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method addressbook_address_key_person_uuid_first_name_delete" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["address_key"]:
            _path_params["address_key"] = _params["address_key"]

        if _params["uuid"]:
            _path_params["uuid"] = _params["uuid"]

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # authentication setting
        _auth_settings = ["bearer_auth"]  # noqa: E501

        _response_types_map = {
            "200": "str",
        }

        return self.api_client.call_api(
            "/addressbook/{address_key}/person/{uuid}/first_name",
            "DELETE",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @overload
    async def addressbook_address_key_person_uuid_first_name_get(
        self,
        address_key: StrictStr,
        uuid: StrictStr,
        last_name: Annotated[Optional[StrictStr], Field(description="Filter by last name")] = None,
        **kwargs,
    ) -> str:  # noqa: E501
        ...

    @overload
    def addressbook_address_key_person_uuid_first_name_get(
        self,
        address_key: StrictStr,
        uuid: StrictStr,
        last_name: Annotated[Optional[StrictStr], Field(description="Filter by last name")] = None,
        async_req: Optional[bool] = True,
        **kwargs,
    ) -> str:  # noqa: E501
        ...

    @validate_arguments
    def addressbook_address_key_person_uuid_first_name_get(
        self,
        address_key: StrictStr,
        uuid: StrictStr,
        last_name: Annotated[Optional[StrictStr], Field(description="Filter by last name")] = None,
        async_req: Optional[bool] = None,
        **kwargs,
    ) -> Union[str, Awaitable[str]]:  # noqa: E501
        """addressbook_address_key_person_uuid_first_name_get  # noqa: E501

        get operation for /addressbook/{address_key}/person/{uuid}/first_name  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.addressbook_address_key_person_uuid_first_name_get(address_key, uuid, last_name, async_req=True)
        >>> result = thread.get()

        :param address_key: (required)
        :type address_key: str
        :param uuid: (required)
        :type uuid: str
        :param last_name: Filter by last name
        :type last_name: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: str
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            raise ValueError(
                "Error! Please call the addressbook_address_key_person_uuid_first_name_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            )
        if async_req is not None:
            kwargs["async_req"] = async_req
        return self.addressbook_address_key_person_uuid_first_name_get_with_http_info(
            address_key, uuid, last_name, **kwargs
        )  # noqa: E501

    @validate_arguments
    def addressbook_address_key_person_uuid_first_name_get_with_http_info(
        self,
        address_key: StrictStr,
        uuid: StrictStr,
        last_name: Annotated[Optional[StrictStr], Field(description="Filter by last name")] = None,
        **kwargs,
    ) -> ApiResponse:  # noqa: E501
        """addressbook_address_key_person_uuid_first_name_get  # noqa: E501

        get operation for /addressbook/{address_key}/person/{uuid}/first_name  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.addressbook_address_key_person_uuid_first_name_get_with_http_info(address_key, uuid, last_name, async_req=True)
        >>> result = thread.get()

        :param address_key: (required)
        :type address_key: str
        :param uuid: (required)
        :type uuid: str
        :param last_name: Filter by last name
        :type last_name: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(str, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["address_key", "uuid", "last_name"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method addressbook_address_key_person_uuid_first_name_get" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["address_key"]:
            _path_params["address_key"] = _params["address_key"]

        if _params["uuid"]:
            _path_params["uuid"] = _params["uuid"]

        # process the query parameters
        _query_params = []
        if _params.get("last_name") is not None:  # noqa: E501
            _query_params.append(("last_name", _params["last_name"]))

        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # authentication setting
        _auth_settings = ["bearer_auth"]  # noqa: E501

        _response_types_map = {
            "200": "str",
        }

        return self.api_client.call_api(
            "/addressbook/{address_key}/person/{uuid}/first_name",
            "GET",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @overload
    async def addressbook_address_key_person_uuid_first_name_head(
        self, address_key: StrictStr, uuid: StrictStr, **kwargs
    ) -> None:  # noqa: E501
        ...

    @overload
    def addressbook_address_key_person_uuid_first_name_head(
        self, address_key: StrictStr, uuid: StrictStr, async_req: Optional[bool] = True, **kwargs
    ) -> None:  # noqa: E501
        ...

    @validate_arguments
    def addressbook_address_key_person_uuid_first_name_head(
        self, address_key: StrictStr, uuid: StrictStr, async_req: Optional[bool] = None, **kwargs
    ) -> Union[None, Awaitable[None]]:  # noqa: E501
        """addressbook_address_key_person_uuid_first_name_head  # noqa: E501

        head operation for /addressbook/{address_key}/person/{uuid}/first_name  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.addressbook_address_key_person_uuid_first_name_head(address_key, uuid, async_req=True)
        >>> result = thread.get()

        :param address_key: (required)
        :type address_key: str
        :param uuid: (required)
        :type uuid: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            raise ValueError(
                "Error! Please call the addressbook_address_key_person_uuid_first_name_head_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            )
        if async_req is not None:
            kwargs["async_req"] = async_req
        return self.addressbook_address_key_person_uuid_first_name_head_with_http_info(
            address_key, uuid, **kwargs
        )  # noqa: E501

    @validate_arguments
    def addressbook_address_key_person_uuid_first_name_head_with_http_info(
        self, address_key: StrictStr, uuid: StrictStr, **kwargs
    ) -> ApiResponse:  # noqa: E501
        """addressbook_address_key_person_uuid_first_name_head  # noqa: E501

        head operation for /addressbook/{address_key}/person/{uuid}/first_name  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.addressbook_address_key_person_uuid_first_name_head_with_http_info(address_key, uuid, async_req=True)
        >>> result = thread.get()

        :param address_key: (required)
        :type address_key: str
        :param uuid: (required)
        :type uuid: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = ["address_key", "uuid"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method addressbook_address_key_person_uuid_first_name_head" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["address_key"]:
            _path_params["address_key"] = _params["address_key"]

        if _params["uuid"]:
            _path_params["uuid"] = _params["uuid"]

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = ["bearer_auth"]  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            "/addressbook/{address_key}/person/{uuid}/first_name",
            "HEAD",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @overload
    async def addressbook_address_key_person_uuid_first_name_put(
        self,
        address_key: StrictStr,
        uuid: StrictStr,
        person: Annotated[
            Person,
            Field(
                ...,
                description="The request body for /addressbook/{address_key}/person/{uuid}/first_name",
            ),
        ],
        **kwargs,
    ) -> str:  # noqa: E501
        ...

    @overload
    def addressbook_address_key_person_uuid_first_name_put(
        self,
        address_key: StrictStr,
        uuid: StrictStr,
        person: Annotated[
            Person,
            Field(
                ...,
                description="The request body for /addressbook/{address_key}/person/{uuid}/first_name",
            ),
        ],
        async_req: Optional[bool] = True,
        **kwargs,
    ) -> str:  # noqa: E501
        ...

    @validate_arguments
    def addressbook_address_key_person_uuid_first_name_put(
        self,
        address_key: StrictStr,
        uuid: StrictStr,
        person: Annotated[
            Person,
            Field(
                ...,
                description="The request body for /addressbook/{address_key}/person/{uuid}/first_name",
            ),
        ],
        async_req: Optional[bool] = None,
        **kwargs,
    ) -> Union[str, Awaitable[str]]:  # noqa: E501
        """addressbook_address_key_person_uuid_first_name_put  # noqa: E501

        put operation for /addressbook/{address_key}/person/{uuid}/first_name  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.addressbook_address_key_person_uuid_first_name_put(address_key, uuid, person, async_req=True)
        >>> result = thread.get()

        :param address_key: (required)
        :type address_key: str
        :param uuid: (required)
        :type uuid: str
        :param person: The request body for /addressbook/{address_key}/person/{uuid}/first_name (required)
        :type person: Person
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: str
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            raise ValueError(
                "Error! Please call the addressbook_address_key_person_uuid_first_name_put_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            )
        if async_req is not None:
            kwargs["async_req"] = async_req
        return self.addressbook_address_key_person_uuid_first_name_put_with_http_info(
            address_key, uuid, person, **kwargs
        )  # noqa: E501

    @validate_arguments
    def addressbook_address_key_person_uuid_first_name_put_with_http_info(
        self,
        address_key: StrictStr,
        uuid: StrictStr,
        person: Annotated[
            Person,
            Field(
                ...,
                description="The request body for /addressbook/{address_key}/person/{uuid}/first_name",
            ),
        ],
        **kwargs,
    ) -> ApiResponse:  # noqa: E501
        """addressbook_address_key_person_uuid_first_name_put  # noqa: E501

        put operation for /addressbook/{address_key}/person/{uuid}/first_name  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.addressbook_address_key_person_uuid_first_name_put_with_http_info(address_key, uuid, person, async_req=True)
        >>> result = thread.get()

        :param address_key: (required)
        :type address_key: str
        :param uuid: (required)
        :type uuid: str
        :param person: The request body for /addressbook/{address_key}/person/{uuid}/first_name (required)
        :type person: Person
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(str, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["address_key", "uuid", "person"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method addressbook_address_key_person_uuid_first_name_put" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["address_key"]:
            _path_params["address_key"] = _params["address_key"]

        if _params["uuid"]:
            _path_params["uuid"] = _params["uuid"]

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params["person"] is not None:
            _body_params = _params["person"]

        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get(
            "_content_type", self.api_client.select_header_content_type(["application/json"])
        )
        if _content_types_list:
            _header_params["Content-Type"] = _content_types_list

        # authentication setting
        _auth_settings = ["bearer_auth"]  # noqa: E501

        _response_types_map = {
            "200": "str",
        }

        return self.api_client.call_api(
            "/addressbook/{address_key}/person/{uuid}/first_name",
            "PUT",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @overload
    async def addressbook_address_key_person_uuid_get(
        self,
        address_key: StrictStr,
        uuid: StrictStr,
        last_name: Annotated[Optional[StrictStr], Field(description="Filter by last name")] = None,
        **kwargs,
    ) -> Person:  # noqa: E501
        ...

    @overload
    def addressbook_address_key_person_uuid_get(
        self,
        address_key: StrictStr,
        uuid: StrictStr,
        last_name: Annotated[Optional[StrictStr], Field(description="Filter by last name")] = None,
        async_req: Optional[bool] = True,
        **kwargs,
    ) -> Person:  # noqa: E501
        ...

    @validate_arguments
    def addressbook_address_key_person_uuid_get(
        self,
        address_key: StrictStr,
        uuid: StrictStr,
        last_name: Annotated[Optional[StrictStr], Field(description="Filter by last name")] = None,
        async_req: Optional[bool] = None,
        **kwargs,
    ) -> Union[Person, Awaitable[Person]]:  # noqa: E501
        """addressbook_address_key_person_uuid_get  # noqa: E501

        get operation for /addressbook/{address_key}/person/{uuid}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.addressbook_address_key_person_uuid_get(address_key, uuid, last_name, async_req=True)
        >>> result = thread.get()

        :param address_key: (required)
        :type address_key: str
        :param uuid: (required)
        :type uuid: str
        :param last_name: Filter by last name
        :type last_name: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Person
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            raise ValueError(
                "Error! Please call the addressbook_address_key_person_uuid_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            )
        if async_req is not None:
            kwargs["async_req"] = async_req
        return self.addressbook_address_key_person_uuid_get_with_http_info(
            address_key, uuid, last_name, **kwargs
        )  # noqa: E501

    @validate_arguments
    def addressbook_address_key_person_uuid_get_with_http_info(
        self,
        address_key: StrictStr,
        uuid: StrictStr,
        last_name: Annotated[Optional[StrictStr], Field(description="Filter by last name")] = None,
        **kwargs,
    ) -> ApiResponse:  # noqa: E501
        """addressbook_address_key_person_uuid_get  # noqa: E501

        get operation for /addressbook/{address_key}/person/{uuid}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.addressbook_address_key_person_uuid_get_with_http_info(address_key, uuid, last_name, async_req=True)
        >>> result = thread.get()

        :param address_key: (required)
        :type address_key: str
        :param uuid: (required)
        :type uuid: str
        :param last_name: Filter by last name
        :type last_name: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Person, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["address_key", "uuid", "last_name"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method addressbook_address_key_person_uuid_get" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["address_key"]:
            _path_params["address_key"] = _params["address_key"]

        if _params["uuid"]:
            _path_params["uuid"] = _params["uuid"]

        # process the query parameters
        _query_params = []
        if _params.get("last_name") is not None:  # noqa: E501
            _query_params.append(("last_name", _params["last_name"]))

        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # authentication setting
        _auth_settings = ["bearer_auth"]  # noqa: E501

        _response_types_map = {
            "200": "Person",
        }

        return self.api_client.call_api(
            "/addressbook/{address_key}/person/{uuid}",
            "GET",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @overload
    async def addressbook_address_key_person_uuid_head(
        self, address_key: StrictStr, uuid: StrictStr, **kwargs
    ) -> None:  # noqa: E501
        ...

    @overload
    def addressbook_address_key_person_uuid_head(
        self, address_key: StrictStr, uuid: StrictStr, async_req: Optional[bool] = True, **kwargs
    ) -> None:  # noqa: E501
        ...

    @validate_arguments
    def addressbook_address_key_person_uuid_head(
        self, address_key: StrictStr, uuid: StrictStr, async_req: Optional[bool] = None, **kwargs
    ) -> Union[None, Awaitable[None]]:  # noqa: E501
        """addressbook_address_key_person_uuid_head  # noqa: E501

        head operation for /addressbook/{address_key}/person/{uuid}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.addressbook_address_key_person_uuid_head(address_key, uuid, async_req=True)
        >>> result = thread.get()

        :param address_key: (required)
        :type address_key: str
        :param uuid: (required)
        :type uuid: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            raise ValueError(
                "Error! Please call the addressbook_address_key_person_uuid_head_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            )
        if async_req is not None:
            kwargs["async_req"] = async_req
        return self.addressbook_address_key_person_uuid_head_with_http_info(
            address_key, uuid, **kwargs
        )  # noqa: E501

    @validate_arguments
    def addressbook_address_key_person_uuid_head_with_http_info(
        self, address_key: StrictStr, uuid: StrictStr, **kwargs
    ) -> ApiResponse:  # noqa: E501
        """addressbook_address_key_person_uuid_head  # noqa: E501

        head operation for /addressbook/{address_key}/person/{uuid}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.addressbook_address_key_person_uuid_head_with_http_info(address_key, uuid, async_req=True)
        >>> result = thread.get()

        :param address_key: (required)
        :type address_key: str
        :param uuid: (required)
        :type uuid: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = ["address_key", "uuid"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method addressbook_address_key_person_uuid_head" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["address_key"]:
            _path_params["address_key"] = _params["address_key"]

        if _params["uuid"]:
            _path_params["uuid"] = _params["uuid"]

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = ["bearer_auth"]  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            "/addressbook/{address_key}/person/{uuid}",
            "HEAD",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @overload
    async def addressbook_address_key_person_uuid_hobbies_delete(
        self, address_key: StrictStr, uuid: StrictStr, **kwargs
    ) -> List[str]:  # noqa: E501
        ...

    @overload
    def addressbook_address_key_person_uuid_hobbies_delete(
        self, address_key: StrictStr, uuid: StrictStr, async_req: Optional[bool] = True, **kwargs
    ) -> List[str]:  # noqa: E501
        ...

    @validate_arguments
    def addressbook_address_key_person_uuid_hobbies_delete(
        self, address_key: StrictStr, uuid: StrictStr, async_req: Optional[bool] = None, **kwargs
    ) -> Union[List[str], Awaitable[List[str]]]:  # noqa: E501
        """addressbook_address_key_person_uuid_hobbies_delete  # noqa: E501

        delete operation for /addressbook/{address_key}/person/{uuid}/hobbies  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.addressbook_address_key_person_uuid_hobbies_delete(address_key, uuid, async_req=True)
        >>> result = thread.get()

        :param address_key: (required)
        :type address_key: str
        :param uuid: (required)
        :type uuid: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[str]
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            raise ValueError(
                "Error! Please call the addressbook_address_key_person_uuid_hobbies_delete_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            )
        if async_req is not None:
            kwargs["async_req"] = async_req
        return self.addressbook_address_key_person_uuid_hobbies_delete_with_http_info(
            address_key, uuid, **kwargs
        )  # noqa: E501

    @validate_arguments
    def addressbook_address_key_person_uuid_hobbies_delete_with_http_info(
        self, address_key: StrictStr, uuid: StrictStr, **kwargs
    ) -> ApiResponse:  # noqa: E501
        """addressbook_address_key_person_uuid_hobbies_delete  # noqa: E501

        delete operation for /addressbook/{address_key}/person/{uuid}/hobbies  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.addressbook_address_key_person_uuid_hobbies_delete_with_http_info(address_key, uuid, async_req=True)
        >>> result = thread.get()

        :param address_key: (required)
        :type address_key: str
        :param uuid: (required)
        :type uuid: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[str], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["address_key", "uuid"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method addressbook_address_key_person_uuid_hobbies_delete" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["address_key"]:
            _path_params["address_key"] = _params["address_key"]

        if _params["uuid"]:
            _path_params["uuid"] = _params["uuid"]

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # authentication setting
        _auth_settings = ["bearer_auth"]  # noqa: E501

        _response_types_map = {
            "200": "List[str]",
        }

        return self.api_client.call_api(
            "/addressbook/{address_key}/person/{uuid}/hobbies",
            "DELETE",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @overload
    async def addressbook_address_key_person_uuid_hobbies_get(
        self,
        address_key: StrictStr,
        uuid: StrictStr,
        last_name: Annotated[Optional[StrictStr], Field(description="Filter by last name")] = None,
        **kwargs,
    ) -> List[str]:  # noqa: E501
        ...

    @overload
    def addressbook_address_key_person_uuid_hobbies_get(
        self,
        address_key: StrictStr,
        uuid: StrictStr,
        last_name: Annotated[Optional[StrictStr], Field(description="Filter by last name")] = None,
        async_req: Optional[bool] = True,
        **kwargs,
    ) -> List[str]:  # noqa: E501
        ...

    @validate_arguments
    def addressbook_address_key_person_uuid_hobbies_get(
        self,
        address_key: StrictStr,
        uuid: StrictStr,
        last_name: Annotated[Optional[StrictStr], Field(description="Filter by last name")] = None,
        async_req: Optional[bool] = None,
        **kwargs,
    ) -> Union[List[str], Awaitable[List[str]]]:  # noqa: E501
        """addressbook_address_key_person_uuid_hobbies_get  # noqa: E501

        get operation for /addressbook/{address_key}/person/{uuid}/hobbies  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.addressbook_address_key_person_uuid_hobbies_get(address_key, uuid, last_name, async_req=True)
        >>> result = thread.get()

        :param address_key: (required)
        :type address_key: str
        :param uuid: (required)
        :type uuid: str
        :param last_name: Filter by last name
        :type last_name: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[str]
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            raise ValueError(
                "Error! Please call the addressbook_address_key_person_uuid_hobbies_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            )
        if async_req is not None:
            kwargs["async_req"] = async_req
        return self.addressbook_address_key_person_uuid_hobbies_get_with_http_info(
            address_key, uuid, last_name, **kwargs
        )  # noqa: E501

    @validate_arguments
    def addressbook_address_key_person_uuid_hobbies_get_with_http_info(
        self,
        address_key: StrictStr,
        uuid: StrictStr,
        last_name: Annotated[Optional[StrictStr], Field(description="Filter by last name")] = None,
        **kwargs,
    ) -> ApiResponse:  # noqa: E501
        """addressbook_address_key_person_uuid_hobbies_get  # noqa: E501

        get operation for /addressbook/{address_key}/person/{uuid}/hobbies  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.addressbook_address_key_person_uuid_hobbies_get_with_http_info(address_key, uuid, last_name, async_req=True)
        >>> result = thread.get()

        :param address_key: (required)
        :type address_key: str
        :param uuid: (required)
        :type uuid: str
        :param last_name: Filter by last name
        :type last_name: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[str], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["address_key", "uuid", "last_name"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method addressbook_address_key_person_uuid_hobbies_get" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["address_key"]:
            _path_params["address_key"] = _params["address_key"]

        if _params["uuid"]:
            _path_params["uuid"] = _params["uuid"]

        # process the query parameters
        _query_params = []
        if _params.get("last_name") is not None:  # noqa: E501
            _query_params.append(("last_name", _params["last_name"]))

        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # authentication setting
        _auth_settings = ["bearer_auth"]  # noqa: E501

        _response_types_map = {
            "200": "List[str]",
        }

        return self.api_client.call_api(
            "/addressbook/{address_key}/person/{uuid}/hobbies",
            "GET",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @overload
    async def addressbook_address_key_person_uuid_hobbies_head(
        self, address_key: StrictStr, uuid: StrictStr, **kwargs
    ) -> None:  # noqa: E501
        ...

    @overload
    def addressbook_address_key_person_uuid_hobbies_head(
        self, address_key: StrictStr, uuid: StrictStr, async_req: Optional[bool] = True, **kwargs
    ) -> None:  # noqa: E501
        ...

    @validate_arguments
    def addressbook_address_key_person_uuid_hobbies_head(
        self, address_key: StrictStr, uuid: StrictStr, async_req: Optional[bool] = None, **kwargs
    ) -> Union[None, Awaitable[None]]:  # noqa: E501
        """addressbook_address_key_person_uuid_hobbies_head  # noqa: E501

        head operation for /addressbook/{address_key}/person/{uuid}/hobbies  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.addressbook_address_key_person_uuid_hobbies_head(address_key, uuid, async_req=True)
        >>> result = thread.get()

        :param address_key: (required)
        :type address_key: str
        :param uuid: (required)
        :type uuid: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            raise ValueError(
                "Error! Please call the addressbook_address_key_person_uuid_hobbies_head_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            )
        if async_req is not None:
            kwargs["async_req"] = async_req
        return self.addressbook_address_key_person_uuid_hobbies_head_with_http_info(
            address_key, uuid, **kwargs
        )  # noqa: E501

    @validate_arguments
    def addressbook_address_key_person_uuid_hobbies_head_with_http_info(
        self, address_key: StrictStr, uuid: StrictStr, **kwargs
    ) -> ApiResponse:  # noqa: E501
        """addressbook_address_key_person_uuid_hobbies_head  # noqa: E501

        head operation for /addressbook/{address_key}/person/{uuid}/hobbies  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.addressbook_address_key_person_uuid_hobbies_head_with_http_info(address_key, uuid, async_req=True)
        >>> result = thread.get()

        :param address_key: (required)
        :type address_key: str
        :param uuid: (required)
        :type uuid: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = ["address_key", "uuid"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method addressbook_address_key_person_uuid_hobbies_head" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["address_key"]:
            _path_params["address_key"] = _params["address_key"]

        if _params["uuid"]:
            _path_params["uuid"] = _params["uuid"]

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = ["bearer_auth"]  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            "/addressbook/{address_key}/person/{uuid}/hobbies",
            "HEAD",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @overload
    async def addressbook_address_key_person_uuid_hobbies_put(
        self,
        address_key: StrictStr,
        uuid: StrictStr,
        person: Annotated[
            Person,
            Field(
                ...,
                description="The request body for /addressbook/{address_key}/person/{uuid}/hobbies",
            ),
        ],
        **kwargs,
    ) -> List[str]:  # noqa: E501
        ...

    @overload
    def addressbook_address_key_person_uuid_hobbies_put(
        self,
        address_key: StrictStr,
        uuid: StrictStr,
        person: Annotated[
            Person,
            Field(
                ...,
                description="The request body for /addressbook/{address_key}/person/{uuid}/hobbies",
            ),
        ],
        async_req: Optional[bool] = True,
        **kwargs,
    ) -> List[str]:  # noqa: E501
        ...

    @validate_arguments
    def addressbook_address_key_person_uuid_hobbies_put(
        self,
        address_key: StrictStr,
        uuid: StrictStr,
        person: Annotated[
            Person,
            Field(
                ...,
                description="The request body for /addressbook/{address_key}/person/{uuid}/hobbies",
            ),
        ],
        async_req: Optional[bool] = None,
        **kwargs,
    ) -> Union[List[str], Awaitable[List[str]]]:  # noqa: E501
        """addressbook_address_key_person_uuid_hobbies_put  # noqa: E501

        put operation for /addressbook/{address_key}/person/{uuid}/hobbies  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.addressbook_address_key_person_uuid_hobbies_put(address_key, uuid, person, async_req=True)
        >>> result = thread.get()

        :param address_key: (required)
        :type address_key: str
        :param uuid: (required)
        :type uuid: str
        :param person: The request body for /addressbook/{address_key}/person/{uuid}/hobbies (required)
        :type person: Person
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[str]
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            raise ValueError(
                "Error! Please call the addressbook_address_key_person_uuid_hobbies_put_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            )
        if async_req is not None:
            kwargs["async_req"] = async_req
        return self.addressbook_address_key_person_uuid_hobbies_put_with_http_info(
            address_key, uuid, person, **kwargs
        )  # noqa: E501

    @validate_arguments
    def addressbook_address_key_person_uuid_hobbies_put_with_http_info(
        self,
        address_key: StrictStr,
        uuid: StrictStr,
        person: Annotated[
            Person,
            Field(
                ...,
                description="The request body for /addressbook/{address_key}/person/{uuid}/hobbies",
            ),
        ],
        **kwargs,
    ) -> ApiResponse:  # noqa: E501
        """addressbook_address_key_person_uuid_hobbies_put  # noqa: E501

        put operation for /addressbook/{address_key}/person/{uuid}/hobbies  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.addressbook_address_key_person_uuid_hobbies_put_with_http_info(address_key, uuid, person, async_req=True)
        >>> result = thread.get()

        :param address_key: (required)
        :type address_key: str
        :param uuid: (required)
        :type uuid: str
        :param person: The request body for /addressbook/{address_key}/person/{uuid}/hobbies (required)
        :type person: Person
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[str], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["address_key", "uuid", "person"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method addressbook_address_key_person_uuid_hobbies_put" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["address_key"]:
            _path_params["address_key"] = _params["address_key"]

        if _params["uuid"]:
            _path_params["uuid"] = _params["uuid"]

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params["person"] is not None:
            _body_params = _params["person"]

        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get(
            "_content_type", self.api_client.select_header_content_type(["application/json"])
        )
        if _content_types_list:
            _header_params["Content-Type"] = _content_types_list

        # authentication setting
        _auth_settings = ["bearer_auth"]  # noqa: E501

        _response_types_map = {
            "200": "List[str]",
        }

        return self.api_client.call_api(
            "/addressbook/{address_key}/person/{uuid}/hobbies",
            "PUT",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @overload
    async def addressbook_address_key_person_uuid_last_name_delete(
        self, address_key: StrictStr, uuid: StrictStr, **kwargs
    ) -> str:  # noqa: E501
        ...

    @overload
    def addressbook_address_key_person_uuid_last_name_delete(
        self, address_key: StrictStr, uuid: StrictStr, async_req: Optional[bool] = True, **kwargs
    ) -> str:  # noqa: E501
        ...

    @validate_arguments
    def addressbook_address_key_person_uuid_last_name_delete(
        self, address_key: StrictStr, uuid: StrictStr, async_req: Optional[bool] = None, **kwargs
    ) -> Union[str, Awaitable[str]]:  # noqa: E501
        """addressbook_address_key_person_uuid_last_name_delete  # noqa: E501

        delete operation for /addressbook/{address_key}/person/{uuid}/last_name  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.addressbook_address_key_person_uuid_last_name_delete(address_key, uuid, async_req=True)
        >>> result = thread.get()

        :param address_key: (required)
        :type address_key: str
        :param uuid: (required)
        :type uuid: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: str
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            raise ValueError(
                "Error! Please call the addressbook_address_key_person_uuid_last_name_delete_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            )
        if async_req is not None:
            kwargs["async_req"] = async_req
        return self.addressbook_address_key_person_uuid_last_name_delete_with_http_info(
            address_key, uuid, **kwargs
        )  # noqa: E501

    @validate_arguments
    def addressbook_address_key_person_uuid_last_name_delete_with_http_info(
        self, address_key: StrictStr, uuid: StrictStr, **kwargs
    ) -> ApiResponse:  # noqa: E501
        """addressbook_address_key_person_uuid_last_name_delete  # noqa: E501

        delete operation for /addressbook/{address_key}/person/{uuid}/last_name  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.addressbook_address_key_person_uuid_last_name_delete_with_http_info(address_key, uuid, async_req=True)
        >>> result = thread.get()

        :param address_key: (required)
        :type address_key: str
        :param uuid: (required)
        :type uuid: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(str, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["address_key", "uuid"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method addressbook_address_key_person_uuid_last_name_delete" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["address_key"]:
            _path_params["address_key"] = _params["address_key"]

        if _params["uuid"]:
            _path_params["uuid"] = _params["uuid"]

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # authentication setting
        _auth_settings = ["bearer_auth"]  # noqa: E501

        _response_types_map = {
            "200": "str",
        }

        return self.api_client.call_api(
            "/addressbook/{address_key}/person/{uuid}/last_name",
            "DELETE",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @overload
    async def addressbook_address_key_person_uuid_last_name_get(
        self,
        address_key: StrictStr,
        uuid: StrictStr,
        last_name: Annotated[Optional[StrictStr], Field(description="Filter by last name")] = None,
        **kwargs,
    ) -> str:  # noqa: E501
        ...

    @overload
    def addressbook_address_key_person_uuid_last_name_get(
        self,
        address_key: StrictStr,
        uuid: StrictStr,
        last_name: Annotated[Optional[StrictStr], Field(description="Filter by last name")] = None,
        async_req: Optional[bool] = True,
        **kwargs,
    ) -> str:  # noqa: E501
        ...

    @validate_arguments
    def addressbook_address_key_person_uuid_last_name_get(
        self,
        address_key: StrictStr,
        uuid: StrictStr,
        last_name: Annotated[Optional[StrictStr], Field(description="Filter by last name")] = None,
        async_req: Optional[bool] = None,
        **kwargs,
    ) -> Union[str, Awaitable[str]]:  # noqa: E501
        """addressbook_address_key_person_uuid_last_name_get  # noqa: E501

        get operation for /addressbook/{address_key}/person/{uuid}/last_name  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.addressbook_address_key_person_uuid_last_name_get(address_key, uuid, last_name, async_req=True)
        >>> result = thread.get()

        :param address_key: (required)
        :type address_key: str
        :param uuid: (required)
        :type uuid: str
        :param last_name: Filter by last name
        :type last_name: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: str
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            raise ValueError(
                "Error! Please call the addressbook_address_key_person_uuid_last_name_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            )
        if async_req is not None:
            kwargs["async_req"] = async_req
        return self.addressbook_address_key_person_uuid_last_name_get_with_http_info(
            address_key, uuid, last_name, **kwargs
        )  # noqa: E501

    @validate_arguments
    def addressbook_address_key_person_uuid_last_name_get_with_http_info(
        self,
        address_key: StrictStr,
        uuid: StrictStr,
        last_name: Annotated[Optional[StrictStr], Field(description="Filter by last name")] = None,
        **kwargs,
    ) -> ApiResponse:  # noqa: E501
        """addressbook_address_key_person_uuid_last_name_get  # noqa: E501

        get operation for /addressbook/{address_key}/person/{uuid}/last_name  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.addressbook_address_key_person_uuid_last_name_get_with_http_info(address_key, uuid, last_name, async_req=True)
        >>> result = thread.get()

        :param address_key: (required)
        :type address_key: str
        :param uuid: (required)
        :type uuid: str
        :param last_name: Filter by last name
        :type last_name: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(str, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["address_key", "uuid", "last_name"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method addressbook_address_key_person_uuid_last_name_get" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["address_key"]:
            _path_params["address_key"] = _params["address_key"]

        if _params["uuid"]:
            _path_params["uuid"] = _params["uuid"]

        # process the query parameters
        _query_params = []
        if _params.get("last_name") is not None:  # noqa: E501
            _query_params.append(("last_name", _params["last_name"]))

        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # authentication setting
        _auth_settings = ["bearer_auth"]  # noqa: E501

        _response_types_map = {
            "200": "str",
        }

        return self.api_client.call_api(
            "/addressbook/{address_key}/person/{uuid}/last_name",
            "GET",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @overload
    async def addressbook_address_key_person_uuid_last_name_head(
        self, address_key: StrictStr, uuid: StrictStr, **kwargs
    ) -> None:  # noqa: E501
        ...

    @overload
    def addressbook_address_key_person_uuid_last_name_head(
        self, address_key: StrictStr, uuid: StrictStr, async_req: Optional[bool] = True, **kwargs
    ) -> None:  # noqa: E501
        ...

    @validate_arguments
    def addressbook_address_key_person_uuid_last_name_head(
        self, address_key: StrictStr, uuid: StrictStr, async_req: Optional[bool] = None, **kwargs
    ) -> Union[None, Awaitable[None]]:  # noqa: E501
        """addressbook_address_key_person_uuid_last_name_head  # noqa: E501

        head operation for /addressbook/{address_key}/person/{uuid}/last_name  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.addressbook_address_key_person_uuid_last_name_head(address_key, uuid, async_req=True)
        >>> result = thread.get()

        :param address_key: (required)
        :type address_key: str
        :param uuid: (required)
        :type uuid: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            raise ValueError(
                "Error! Please call the addressbook_address_key_person_uuid_last_name_head_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            )
        if async_req is not None:
            kwargs["async_req"] = async_req
        return self.addressbook_address_key_person_uuid_last_name_head_with_http_info(
            address_key, uuid, **kwargs
        )  # noqa: E501

    @validate_arguments
    def addressbook_address_key_person_uuid_last_name_head_with_http_info(
        self, address_key: StrictStr, uuid: StrictStr, **kwargs
    ) -> ApiResponse:  # noqa: E501
        """addressbook_address_key_person_uuid_last_name_head  # noqa: E501

        head operation for /addressbook/{address_key}/person/{uuid}/last_name  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.addressbook_address_key_person_uuid_last_name_head_with_http_info(address_key, uuid, async_req=True)
        >>> result = thread.get()

        :param address_key: (required)
        :type address_key: str
        :param uuid: (required)
        :type uuid: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = ["address_key", "uuid"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method addressbook_address_key_person_uuid_last_name_head" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["address_key"]:
            _path_params["address_key"] = _params["address_key"]

        if _params["uuid"]:
            _path_params["uuid"] = _params["uuid"]

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = ["bearer_auth"]  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            "/addressbook/{address_key}/person/{uuid}/last_name",
            "HEAD",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @overload
    async def addressbook_address_key_person_uuid_last_name_put(
        self,
        address_key: StrictStr,
        uuid: StrictStr,
        person: Annotated[
            Person,
            Field(
                ...,
                description="The request body for /addressbook/{address_key}/person/{uuid}/last_name",
            ),
        ],
        **kwargs,
    ) -> str:  # noqa: E501
        ...

    @overload
    def addressbook_address_key_person_uuid_last_name_put(
        self,
        address_key: StrictStr,
        uuid: StrictStr,
        person: Annotated[
            Person,
            Field(
                ...,
                description="The request body for /addressbook/{address_key}/person/{uuid}/last_name",
            ),
        ],
        async_req: Optional[bool] = True,
        **kwargs,
    ) -> str:  # noqa: E501
        ...

    @validate_arguments
    def addressbook_address_key_person_uuid_last_name_put(
        self,
        address_key: StrictStr,
        uuid: StrictStr,
        person: Annotated[
            Person,
            Field(
                ...,
                description="The request body for /addressbook/{address_key}/person/{uuid}/last_name",
            ),
        ],
        async_req: Optional[bool] = None,
        **kwargs,
    ) -> Union[str, Awaitable[str]]:  # noqa: E501
        """addressbook_address_key_person_uuid_last_name_put  # noqa: E501

        put operation for /addressbook/{address_key}/person/{uuid}/last_name  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.addressbook_address_key_person_uuid_last_name_put(address_key, uuid, person, async_req=True)
        >>> result = thread.get()

        :param address_key: (required)
        :type address_key: str
        :param uuid: (required)
        :type uuid: str
        :param person: The request body for /addressbook/{address_key}/person/{uuid}/last_name (required)
        :type person: Person
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: str
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            raise ValueError(
                "Error! Please call the addressbook_address_key_person_uuid_last_name_put_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            )
        if async_req is not None:
            kwargs["async_req"] = async_req
        return self.addressbook_address_key_person_uuid_last_name_put_with_http_info(
            address_key, uuid, person, **kwargs
        )  # noqa: E501

    @validate_arguments
    def addressbook_address_key_person_uuid_last_name_put_with_http_info(
        self,
        address_key: StrictStr,
        uuid: StrictStr,
        person: Annotated[
            Person,
            Field(
                ...,
                description="The request body for /addressbook/{address_key}/person/{uuid}/last_name",
            ),
        ],
        **kwargs,
    ) -> ApiResponse:  # noqa: E501
        """addressbook_address_key_person_uuid_last_name_put  # noqa: E501

        put operation for /addressbook/{address_key}/person/{uuid}/last_name  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.addressbook_address_key_person_uuid_last_name_put_with_http_info(address_key, uuid, person, async_req=True)
        >>> result = thread.get()

        :param address_key: (required)
        :type address_key: str
        :param uuid: (required)
        :type uuid: str
        :param person: The request body for /addressbook/{address_key}/person/{uuid}/last_name (required)
        :type person: Person
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(str, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["address_key", "uuid", "person"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method addressbook_address_key_person_uuid_last_name_put" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["address_key"]:
            _path_params["address_key"] = _params["address_key"]

        if _params["uuid"]:
            _path_params["uuid"] = _params["uuid"]

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params["person"] is not None:
            _body_params = _params["person"]

        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get(
            "_content_type", self.api_client.select_header_content_type(["application/json"])
        )
        if _content_types_list:
            _header_params["Content-Type"] = _content_types_list

        # authentication setting
        _auth_settings = ["bearer_auth"]  # noqa: E501

        _response_types_map = {
            "200": "str",
        }

        return self.api_client.call_api(
            "/addressbook/{address_key}/person/{uuid}/last_name",
            "PUT",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @overload
    async def addressbook_address_key_person_uuid_patch(
        self, address_key: StrictStr, uuid: StrictStr, **kwargs
    ) -> Person:  # noqa: E501
        ...

    @overload
    def addressbook_address_key_person_uuid_patch(
        self, address_key: StrictStr, uuid: StrictStr, async_req: Optional[bool] = True, **kwargs
    ) -> Person:  # noqa: E501
        ...

    @validate_arguments
    def addressbook_address_key_person_uuid_patch(
        self, address_key: StrictStr, uuid: StrictStr, async_req: Optional[bool] = None, **kwargs
    ) -> Union[Person, Awaitable[Person]]:  # noqa: E501
        """addressbook_address_key_person_uuid_patch  # noqa: E501

        patch operation for /addressbook/{address_key}/person/{uuid}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.addressbook_address_key_person_uuid_patch(address_key, uuid, async_req=True)
        >>> result = thread.get()

        :param address_key: (required)
        :type address_key: str
        :param uuid: (required)
        :type uuid: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Person
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            raise ValueError(
                "Error! Please call the addressbook_address_key_person_uuid_patch_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            )
        if async_req is not None:
            kwargs["async_req"] = async_req
        return self.addressbook_address_key_person_uuid_patch_with_http_info(
            address_key, uuid, **kwargs
        )  # noqa: E501

    @validate_arguments
    def addressbook_address_key_person_uuid_patch_with_http_info(
        self, address_key: StrictStr, uuid: StrictStr, **kwargs
    ) -> ApiResponse:  # noqa: E501
        """addressbook_address_key_person_uuid_patch  # noqa: E501

        patch operation for /addressbook/{address_key}/person/{uuid}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.addressbook_address_key_person_uuid_patch_with_http_info(address_key, uuid, async_req=True)
        >>> result = thread.get()

        :param address_key: (required)
        :type address_key: str
        :param uuid: (required)
        :type uuid: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Person, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["address_key", "uuid"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method addressbook_address_key_person_uuid_patch" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["address_key"]:
            _path_params["address_key"] = _params["address_key"]

        if _params["uuid"]:
            _path_params["uuid"] = _params["uuid"]

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # authentication setting
        _auth_settings = ["bearer_auth"]  # noqa: E501

        _response_types_map = {
            "200": "Person",
        }

        return self.api_client.call_api(
            "/addressbook/{address_key}/person/{uuid}",
            "PATCH",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @overload
    async def addressbook_address_key_person_uuid_put(
        self,
        address_key: StrictStr,
        uuid: StrictStr,
        update_person: Annotated[
            UpdatePerson,
            Field(..., description="The request body for /addressbook/{address_key}/person/{uuid}"),
        ],
        **kwargs,
    ) -> UpdatePerson:  # noqa: E501
        ...

    @overload
    def addressbook_address_key_person_uuid_put(
        self,
        address_key: StrictStr,
        uuid: StrictStr,
        update_person: Annotated[
            UpdatePerson,
            Field(..., description="The request body for /addressbook/{address_key}/person/{uuid}"),
        ],
        async_req: Optional[bool] = True,
        **kwargs,
    ) -> UpdatePerson:  # noqa: E501
        ...

    @validate_arguments
    def addressbook_address_key_person_uuid_put(
        self,
        address_key: StrictStr,
        uuid: StrictStr,
        update_person: Annotated[
            UpdatePerson,
            Field(..., description="The request body for /addressbook/{address_key}/person/{uuid}"),
        ],
        async_req: Optional[bool] = None,
        **kwargs,
    ) -> Union[UpdatePerson, Awaitable[UpdatePerson]]:  # noqa: E501
        """addressbook_address_key_person_uuid_put  # noqa: E501

        put operation for /addressbook/{address_key}/person/{uuid}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.addressbook_address_key_person_uuid_put(address_key, uuid, update_person, async_req=True)
        >>> result = thread.get()

        :param address_key: (required)
        :type address_key: str
        :param uuid: (required)
        :type uuid: str
        :param update_person: The request body for /addressbook/{address_key}/person/{uuid} (required)
        :type update_person: UpdatePerson
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: UpdatePerson
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            raise ValueError(
                "Error! Please call the addressbook_address_key_person_uuid_put_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            )
        if async_req is not None:
            kwargs["async_req"] = async_req
        return self.addressbook_address_key_person_uuid_put_with_http_info(
            address_key, uuid, update_person, **kwargs
        )  # noqa: E501

    @validate_arguments
    def addressbook_address_key_person_uuid_put_with_http_info(
        self,
        address_key: StrictStr,
        uuid: StrictStr,
        update_person: Annotated[
            UpdatePerson,
            Field(..., description="The request body for /addressbook/{address_key}/person/{uuid}"),
        ],
        **kwargs,
    ) -> ApiResponse:  # noqa: E501
        """addressbook_address_key_person_uuid_put  # noqa: E501

        put operation for /addressbook/{address_key}/person/{uuid}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.addressbook_address_key_person_uuid_put_with_http_info(address_key, uuid, update_person, async_req=True)
        >>> result = thread.get()

        :param address_key: (required)
        :type address_key: str
        :param uuid: (required)
        :type uuid: str
        :param update_person: The request body for /addressbook/{address_key}/person/{uuid} (required)
        :type update_person: UpdatePerson
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(UpdatePerson, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["address_key", "uuid", "update_person"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method addressbook_address_key_person_uuid_put" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["address_key"]:
            _path_params["address_key"] = _params["address_key"]

        if _params["uuid"]:
            _path_params["uuid"] = _params["uuid"]

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params["update_person"] is not None:
            _body_params = _params["update_person"]

        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get(
            "_content_type", self.api_client.select_header_content_type(["application/json"])
        )
        if _content_types_list:
            _header_params["Content-Type"] = _content_types_list

        # authentication setting
        _auth_settings = ["bearer_auth"]  # noqa: E501

        _response_types_map = {
            "200": "UpdatePerson",
        }

        return self.api_client.call_api(
            "/addressbook/{address_key}/person/{uuid}",
            "PUT",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @overload
    async def addressbook_address_key_put(
        self,
        address_key: StrictStr,
        update_addressbook: Annotated[
            UpdateAddressbook,
            Field(..., description="The request body for /addressbook/{address_key}"),
        ],
        **kwargs,
    ) -> UpdateAddressbook:  # noqa: E501
        ...

    @overload
    def addressbook_address_key_put(
        self,
        address_key: StrictStr,
        update_addressbook: Annotated[
            UpdateAddressbook,
            Field(..., description="The request body for /addressbook/{address_key}"),
        ],
        async_req: Optional[bool] = True,
        **kwargs,
    ) -> UpdateAddressbook:  # noqa: E501
        ...

    @validate_arguments
    def addressbook_address_key_put(
        self,
        address_key: StrictStr,
        update_addressbook: Annotated[
            UpdateAddressbook,
            Field(..., description="The request body for /addressbook/{address_key}"),
        ],
        async_req: Optional[bool] = None,
        **kwargs,
    ) -> Union[UpdateAddressbook, Awaitable[UpdateAddressbook]]:  # noqa: E501
        """addressbook_address_key_put  # noqa: E501

        Update an existing address in this addressbook, with the given address key.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.addressbook_address_key_put(address_key, update_addressbook, async_req=True)
        >>> result = thread.get()

        :param address_key: (required)
        :type address_key: str
        :param update_addressbook: The request body for /addressbook/{address_key} (required)
        :type update_addressbook: UpdateAddressbook
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: UpdateAddressbook
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            raise ValueError(
                "Error! Please call the addressbook_address_key_put_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            )
        if async_req is not None:
            kwargs["async_req"] = async_req
        return self.addressbook_address_key_put_with_http_info(
            address_key, update_addressbook, **kwargs
        )  # noqa: E501

    @validate_arguments
    def addressbook_address_key_put_with_http_info(
        self,
        address_key: StrictStr,
        update_addressbook: Annotated[
            UpdateAddressbook,
            Field(..., description="The request body for /addressbook/{address_key}"),
        ],
        **kwargs,
    ) -> ApiResponse:  # noqa: E501
        """addressbook_address_key_put  # noqa: E501

        Update an existing address in this addressbook, with the given address key.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.addressbook_address_key_put_with_http_info(address_key, update_addressbook, async_req=True)
        >>> result = thread.get()

        :param address_key: (required)
        :type address_key: str
        :param update_addressbook: The request body for /addressbook/{address_key} (required)
        :type update_addressbook: UpdateAddressbook
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(UpdateAddressbook, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["address_key", "update_addressbook"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method addressbook_address_key_put" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["address_key"]:
            _path_params["address_key"] = _params["address_key"]

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params["update_addressbook"] is not None:
            _body_params = _params["update_addressbook"]

        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get(
            "_content_type", self.api_client.select_header_content_type(["application/json"])
        )
        if _content_types_list:
            _header_params["Content-Type"] = _content_types_list

        # authentication setting
        _auth_settings = ["bearer_auth"]  # noqa: E501

        _response_types_map = {
            "200": "UpdateAddressbook",
        }

        return self.api_client.call_api(
            "/addressbook/{address_key}",
            "PUT",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @overload
    async def addressbook_address_key_state_delete(
        self, address_key: StrictStr, **kwargs
    ) -> str:  # noqa: E501
        ...

    @overload
    def addressbook_address_key_state_delete(
        self, address_key: StrictStr, async_req: Optional[bool] = True, **kwargs
    ) -> str:  # noqa: E501
        ...

    @validate_arguments
    def addressbook_address_key_state_delete(
        self, address_key: StrictStr, async_req: Optional[bool] = None, **kwargs
    ) -> Union[str, Awaitable[str]]:  # noqa: E501
        """addressbook_address_key_state_delete  # noqa: E501

        delete operation for /addressbook/{address_key}/state  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.addressbook_address_key_state_delete(address_key, async_req=True)
        >>> result = thread.get()

        :param address_key: (required)
        :type address_key: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: str
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            raise ValueError(
                "Error! Please call the addressbook_address_key_state_delete_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            )
        if async_req is not None:
            kwargs["async_req"] = async_req
        return self.addressbook_address_key_state_delete_with_http_info(
            address_key, **kwargs
        )  # noqa: E501

    @validate_arguments
    def addressbook_address_key_state_delete_with_http_info(
        self, address_key: StrictStr, **kwargs
    ) -> ApiResponse:  # noqa: E501
        """addressbook_address_key_state_delete  # noqa: E501

        delete operation for /addressbook/{address_key}/state  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.addressbook_address_key_state_delete_with_http_info(address_key, async_req=True)
        >>> result = thread.get()

        :param address_key: (required)
        :type address_key: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(str, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["address_key"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method addressbook_address_key_state_delete" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["address_key"]:
            _path_params["address_key"] = _params["address_key"]

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # authentication setting
        _auth_settings = ["bearer_auth"]  # noqa: E501

        _response_types_map = {
            "200": "str",
        }

        return self.api_client.call_api(
            "/addressbook/{address_key}/state",
            "DELETE",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @overload
    async def addressbook_address_key_state_get(
        self,
        address_key: StrictStr,
        city: Annotated[Optional[StrictStr], Field(description="Filter by city name")] = None,
        **kwargs,
    ) -> str:  # noqa: E501
        ...

    @overload
    def addressbook_address_key_state_get(
        self,
        address_key: StrictStr,
        city: Annotated[Optional[StrictStr], Field(description="Filter by city name")] = None,
        async_req: Optional[bool] = True,
        **kwargs,
    ) -> str:  # noqa: E501
        ...

    @validate_arguments
    def addressbook_address_key_state_get(
        self,
        address_key: StrictStr,
        city: Annotated[Optional[StrictStr], Field(description="Filter by city name")] = None,
        async_req: Optional[bool] = None,
        **kwargs,
    ) -> Union[str, Awaitable[str]]:  # noqa: E501
        """addressbook_address_key_state_get  # noqa: E501

        get operation for /addressbook/{address_key}/state  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.addressbook_address_key_state_get(address_key, city, async_req=True)
        >>> result = thread.get()

        :param address_key: (required)
        :type address_key: str
        :param city: Filter by city name
        :type city: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: str
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            raise ValueError(
                "Error! Please call the addressbook_address_key_state_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            )
        if async_req is not None:
            kwargs["async_req"] = async_req
        return self.addressbook_address_key_state_get_with_http_info(
            address_key, city, **kwargs
        )  # noqa: E501

    @validate_arguments
    def addressbook_address_key_state_get_with_http_info(
        self,
        address_key: StrictStr,
        city: Annotated[Optional[StrictStr], Field(description="Filter by city name")] = None,
        **kwargs,
    ) -> ApiResponse:  # noqa: E501
        """addressbook_address_key_state_get  # noqa: E501

        get operation for /addressbook/{address_key}/state  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.addressbook_address_key_state_get_with_http_info(address_key, city, async_req=True)
        >>> result = thread.get()

        :param address_key: (required)
        :type address_key: str
        :param city: Filter by city name
        :type city: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(str, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["address_key", "city"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method addressbook_address_key_state_get" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["address_key"]:
            _path_params["address_key"] = _params["address_key"]

        # process the query parameters
        _query_params = []
        if _params.get("city") is not None:  # noqa: E501
            _query_params.append(("city", _params["city"]))

        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # authentication setting
        _auth_settings = ["bearer_auth"]  # noqa: E501

        _response_types_map = {
            "200": "str",
        }

        return self.api_client.call_api(
            "/addressbook/{address_key}/state",
            "GET",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @overload
    async def addressbook_address_key_state_head(
        self, address_key: StrictStr, **kwargs
    ) -> None:  # noqa: E501
        ...

    @overload
    def addressbook_address_key_state_head(
        self, address_key: StrictStr, async_req: Optional[bool] = True, **kwargs
    ) -> None:  # noqa: E501
        ...

    @validate_arguments
    def addressbook_address_key_state_head(
        self, address_key: StrictStr, async_req: Optional[bool] = None, **kwargs
    ) -> Union[None, Awaitable[None]]:  # noqa: E501
        """addressbook_address_key_state_head  # noqa: E501

        head operation for /addressbook/{address_key}/state  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.addressbook_address_key_state_head(address_key, async_req=True)
        >>> result = thread.get()

        :param address_key: (required)
        :type address_key: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            raise ValueError(
                "Error! Please call the addressbook_address_key_state_head_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            )
        if async_req is not None:
            kwargs["async_req"] = async_req
        return self.addressbook_address_key_state_head_with_http_info(
            address_key, **kwargs
        )  # noqa: E501

    @validate_arguments
    def addressbook_address_key_state_head_with_http_info(
        self, address_key: StrictStr, **kwargs
    ) -> ApiResponse:  # noqa: E501
        """addressbook_address_key_state_head  # noqa: E501

        head operation for /addressbook/{address_key}/state  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.addressbook_address_key_state_head_with_http_info(address_key, async_req=True)
        >>> result = thread.get()

        :param address_key: (required)
        :type address_key: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = ["address_key"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method addressbook_address_key_state_head" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["address_key"]:
            _path_params["address_key"] = _params["address_key"]

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = ["bearer_auth"]  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            "/addressbook/{address_key}/state",
            "HEAD",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @overload
    async def addressbook_address_key_state_put(
        self,
        address_key: StrictStr,
        addressbook: Annotated[
            Addressbook,
            Field(..., description="The request body for /addressbook/{address_key}/state"),
        ],
        **kwargs,
    ) -> str:  # noqa: E501
        ...

    @overload
    def addressbook_address_key_state_put(
        self,
        address_key: StrictStr,
        addressbook: Annotated[
            Addressbook,
            Field(..., description="The request body for /addressbook/{address_key}/state"),
        ],
        async_req: Optional[bool] = True,
        **kwargs,
    ) -> str:  # noqa: E501
        ...

    @validate_arguments
    def addressbook_address_key_state_put(
        self,
        address_key: StrictStr,
        addressbook: Annotated[
            Addressbook,
            Field(..., description="The request body for /addressbook/{address_key}/state"),
        ],
        async_req: Optional[bool] = None,
        **kwargs,
    ) -> Union[str, Awaitable[str]]:  # noqa: E501
        """addressbook_address_key_state_put  # noqa: E501

        put operation for /addressbook/{address_key}/state  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.addressbook_address_key_state_put(address_key, addressbook, async_req=True)
        >>> result = thread.get()

        :param address_key: (required)
        :type address_key: str
        :param addressbook: The request body for /addressbook/{address_key}/state (required)
        :type addressbook: Addressbook
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: str
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            raise ValueError(
                "Error! Please call the addressbook_address_key_state_put_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            )
        if async_req is not None:
            kwargs["async_req"] = async_req
        return self.addressbook_address_key_state_put_with_http_info(
            address_key, addressbook, **kwargs
        )  # noqa: E501

    @validate_arguments
    def addressbook_address_key_state_put_with_http_info(
        self,
        address_key: StrictStr,
        addressbook: Annotated[
            Addressbook,
            Field(..., description="The request body for /addressbook/{address_key}/state"),
        ],
        **kwargs,
    ) -> ApiResponse:  # noqa: E501
        """addressbook_address_key_state_put  # noqa: E501

        put operation for /addressbook/{address_key}/state  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.addressbook_address_key_state_put_with_http_info(address_key, addressbook, async_req=True)
        >>> result = thread.get()

        :param address_key: (required)
        :type address_key: str
        :param addressbook: The request body for /addressbook/{address_key}/state (required)
        :type addressbook: Addressbook
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(str, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["address_key", "addressbook"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method addressbook_address_key_state_put" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["address_key"]:
            _path_params["address_key"] = _params["address_key"]

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params["addressbook"] is not None:
            _body_params = _params["addressbook"]

        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get(
            "_content_type", self.api_client.select_header_content_type(["application/json"])
        )
        if _content_types_list:
            _header_params["Content-Type"] = _content_types_list

        # authentication setting
        _auth_settings = ["bearer_auth"]  # noqa: E501

        _response_types_map = {
            "200": "str",
        }

        return self.api_client.call_api(
            "/addressbook/{address_key}/state",
            "PUT",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @overload
    async def addressbook_address_key_street_delete(
        self, address_key: StrictStr, **kwargs
    ) -> str:  # noqa: E501
        ...

    @overload
    def addressbook_address_key_street_delete(
        self, address_key: StrictStr, async_req: Optional[bool] = True, **kwargs
    ) -> str:  # noqa: E501
        ...

    @validate_arguments
    def addressbook_address_key_street_delete(
        self, address_key: StrictStr, async_req: Optional[bool] = None, **kwargs
    ) -> Union[str, Awaitable[str]]:  # noqa: E501
        """addressbook_address_key_street_delete  # noqa: E501

        delete operation for /addressbook/{address_key}/street  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.addressbook_address_key_street_delete(address_key, async_req=True)
        >>> result = thread.get()

        :param address_key: (required)
        :type address_key: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: str
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            raise ValueError(
                "Error! Please call the addressbook_address_key_street_delete_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            )
        if async_req is not None:
            kwargs["async_req"] = async_req
        return self.addressbook_address_key_street_delete_with_http_info(
            address_key, **kwargs
        )  # noqa: E501

    @validate_arguments
    def addressbook_address_key_street_delete_with_http_info(
        self, address_key: StrictStr, **kwargs
    ) -> ApiResponse:  # noqa: E501
        """addressbook_address_key_street_delete  # noqa: E501

        delete operation for /addressbook/{address_key}/street  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.addressbook_address_key_street_delete_with_http_info(address_key, async_req=True)
        >>> result = thread.get()

        :param address_key: (required)
        :type address_key: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(str, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["address_key"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method addressbook_address_key_street_delete" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["address_key"]:
            _path_params["address_key"] = _params["address_key"]

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # authentication setting
        _auth_settings = ["bearer_auth"]  # noqa: E501

        _response_types_map = {
            "200": "str",
        }

        return self.api_client.call_api(
            "/addressbook/{address_key}/street",
            "DELETE",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @overload
    async def addressbook_address_key_street_get(
        self,
        address_key: StrictStr,
        city: Annotated[Optional[StrictStr], Field(description="Filter by city name")] = None,
        **kwargs,
    ) -> str:  # noqa: E501
        ...

    @overload
    def addressbook_address_key_street_get(
        self,
        address_key: StrictStr,
        city: Annotated[Optional[StrictStr], Field(description="Filter by city name")] = None,
        async_req: Optional[bool] = True,
        **kwargs,
    ) -> str:  # noqa: E501
        ...

    @validate_arguments
    def addressbook_address_key_street_get(
        self,
        address_key: StrictStr,
        city: Annotated[Optional[StrictStr], Field(description="Filter by city name")] = None,
        async_req: Optional[bool] = None,
        **kwargs,
    ) -> Union[str, Awaitable[str]]:  # noqa: E501
        """addressbook_address_key_street_get  # noqa: E501

        get operation for /addressbook/{address_key}/street  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.addressbook_address_key_street_get(address_key, city, async_req=True)
        >>> result = thread.get()

        :param address_key: (required)
        :type address_key: str
        :param city: Filter by city name
        :type city: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: str
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            raise ValueError(
                "Error! Please call the addressbook_address_key_street_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            )
        if async_req is not None:
            kwargs["async_req"] = async_req
        return self.addressbook_address_key_street_get_with_http_info(
            address_key, city, **kwargs
        )  # noqa: E501

    @validate_arguments
    def addressbook_address_key_street_get_with_http_info(
        self,
        address_key: StrictStr,
        city: Annotated[Optional[StrictStr], Field(description="Filter by city name")] = None,
        **kwargs,
    ) -> ApiResponse:  # noqa: E501
        """addressbook_address_key_street_get  # noqa: E501

        get operation for /addressbook/{address_key}/street  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.addressbook_address_key_street_get_with_http_info(address_key, city, async_req=True)
        >>> result = thread.get()

        :param address_key: (required)
        :type address_key: str
        :param city: Filter by city name
        :type city: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(str, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["address_key", "city"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method addressbook_address_key_street_get" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["address_key"]:
            _path_params["address_key"] = _params["address_key"]

        # process the query parameters
        _query_params = []
        if _params.get("city") is not None:  # noqa: E501
            _query_params.append(("city", _params["city"]))

        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # authentication setting
        _auth_settings = ["bearer_auth"]  # noqa: E501

        _response_types_map = {
            "200": "str",
        }

        return self.api_client.call_api(
            "/addressbook/{address_key}/street",
            "GET",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @overload
    async def addressbook_address_key_street_head(
        self, address_key: StrictStr, **kwargs
    ) -> None:  # noqa: E501
        ...

    @overload
    def addressbook_address_key_street_head(
        self, address_key: StrictStr, async_req: Optional[bool] = True, **kwargs
    ) -> None:  # noqa: E501
        ...

    @validate_arguments
    def addressbook_address_key_street_head(
        self, address_key: StrictStr, async_req: Optional[bool] = None, **kwargs
    ) -> Union[None, Awaitable[None]]:  # noqa: E501
        """addressbook_address_key_street_head  # noqa: E501

        head operation for /addressbook/{address_key}/street  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.addressbook_address_key_street_head(address_key, async_req=True)
        >>> result = thread.get()

        :param address_key: (required)
        :type address_key: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            raise ValueError(
                "Error! Please call the addressbook_address_key_street_head_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            )
        if async_req is not None:
            kwargs["async_req"] = async_req
        return self.addressbook_address_key_street_head_with_http_info(
            address_key, **kwargs
        )  # noqa: E501

    @validate_arguments
    def addressbook_address_key_street_head_with_http_info(
        self, address_key: StrictStr, **kwargs
    ) -> ApiResponse:  # noqa: E501
        """addressbook_address_key_street_head  # noqa: E501

        head operation for /addressbook/{address_key}/street  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.addressbook_address_key_street_head_with_http_info(address_key, async_req=True)
        >>> result = thread.get()

        :param address_key: (required)
        :type address_key: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = ["address_key"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method addressbook_address_key_street_head" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["address_key"]:
            _path_params["address_key"] = _params["address_key"]

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = ["bearer_auth"]  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            "/addressbook/{address_key}/street",
            "HEAD",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @overload
    async def addressbook_address_key_street_put(
        self,
        address_key: StrictStr,
        addressbook: Annotated[
            Addressbook,
            Field(..., description="The request body for /addressbook/{address_key}/street"),
        ],
        **kwargs,
    ) -> str:  # noqa: E501
        ...

    @overload
    def addressbook_address_key_street_put(
        self,
        address_key: StrictStr,
        addressbook: Annotated[
            Addressbook,
            Field(..., description="The request body for /addressbook/{address_key}/street"),
        ],
        async_req: Optional[bool] = True,
        **kwargs,
    ) -> str:  # noqa: E501
        ...

    @validate_arguments
    def addressbook_address_key_street_put(
        self,
        address_key: StrictStr,
        addressbook: Annotated[
            Addressbook,
            Field(..., description="The request body for /addressbook/{address_key}/street"),
        ],
        async_req: Optional[bool] = None,
        **kwargs,
    ) -> Union[str, Awaitable[str]]:  # noqa: E501
        """addressbook_address_key_street_put  # noqa: E501

        put operation for /addressbook/{address_key}/street  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.addressbook_address_key_street_put(address_key, addressbook, async_req=True)
        >>> result = thread.get()

        :param address_key: (required)
        :type address_key: str
        :param addressbook: The request body for /addressbook/{address_key}/street (required)
        :type addressbook: Addressbook
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: str
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            raise ValueError(
                "Error! Please call the addressbook_address_key_street_put_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            )
        if async_req is not None:
            kwargs["async_req"] = async_req
        return self.addressbook_address_key_street_put_with_http_info(
            address_key, addressbook, **kwargs
        )  # noqa: E501

    @validate_arguments
    def addressbook_address_key_street_put_with_http_info(
        self,
        address_key: StrictStr,
        addressbook: Annotated[
            Addressbook,
            Field(..., description="The request body for /addressbook/{address_key}/street"),
        ],
        **kwargs,
    ) -> ApiResponse:  # noqa: E501
        """addressbook_address_key_street_put  # noqa: E501

        put operation for /addressbook/{address_key}/street  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.addressbook_address_key_street_put_with_http_info(address_key, addressbook, async_req=True)
        >>> result = thread.get()

        :param address_key: (required)
        :type address_key: str
        :param addressbook: The request body for /addressbook/{address_key}/street (required)
        :type addressbook: Addressbook
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(str, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["address_key", "addressbook"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method addressbook_address_key_street_put" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["address_key"]:
            _path_params["address_key"] = _params["address_key"]

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params["addressbook"] is not None:
            _body_params = _params["addressbook"]

        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get(
            "_content_type", self.api_client.select_header_content_type(["application/json"])
        )
        if _content_types_list:
            _header_params["Content-Type"] = _content_types_list

        # authentication setting
        _auth_settings = ["bearer_auth"]  # noqa: E501

        _response_types_map = {
            "200": "str",
        }

        return self.api_client.call_api(
            "/addressbook/{address_key}/street",
            "PUT",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @overload
    async def addressbook_get(
        self,
        city: Annotated[Optional[StrictStr], Field(description="Filter by city name")] = None,
        limit: Annotated[
            Optional[StrictInt], Field(description="Limit the number of responses back")
        ] = None,
        offset: Annotated[
            Optional[StrictInt], Field(description="The offset to start returning resources")
        ] = None,
        **kwargs,
    ) -> List[Addressbook]:  # noqa: E501
        ...

    @overload
    def addressbook_get(
        self,
        city: Annotated[Optional[StrictStr], Field(description="Filter by city name")] = None,
        limit: Annotated[
            Optional[StrictInt], Field(description="Limit the number of responses back")
        ] = None,
        offset: Annotated[
            Optional[StrictInt], Field(description="The offset to start returning resources")
        ] = None,
        async_req: Optional[bool] = True,
        **kwargs,
    ) -> List[Addressbook]:  # noqa: E501
        ...

    @validate_arguments
    def addressbook_get(
        self,
        city: Annotated[Optional[StrictStr], Field(description="Filter by city name")] = None,
        limit: Annotated[
            Optional[StrictInt], Field(description="Limit the number of responses back")
        ] = None,
        offset: Annotated[
            Optional[StrictInt], Field(description="The offset to start returning resources")
        ] = None,
        async_req: Optional[bool] = None,
        **kwargs,
    ) -> Union[List[Addressbook], Awaitable[List[Addressbook]]]:  # noqa: E501
        """addressbook_get  # noqa: E501

        List all addresses in this addressbook.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.addressbook_get(city, limit, offset, async_req=True)
        >>> result = thread.get()

        :param city: Filter by city name
        :type city: str
        :param limit: Limit the number of responses back
        :type limit: int
        :param offset: The offset to start returning resources
        :type offset: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[Addressbook]
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            raise ValueError(
                "Error! Please call the addressbook_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            )
        if async_req is not None:
            kwargs["async_req"] = async_req
        return self.addressbook_get_with_http_info(city, limit, offset, **kwargs)  # noqa: E501

    @validate_arguments
    def addressbook_get_with_http_info(
        self,
        city: Annotated[Optional[StrictStr], Field(description="Filter by city name")] = None,
        limit: Annotated[
            Optional[StrictInt], Field(description="Limit the number of responses back")
        ] = None,
        offset: Annotated[
            Optional[StrictInt], Field(description="The offset to start returning resources")
        ] = None,
        **kwargs,
    ) -> ApiResponse:  # noqa: E501
        """addressbook_get  # noqa: E501

        List all addresses in this addressbook.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.addressbook_get_with_http_info(city, limit, offset, async_req=True)
        >>> result = thread.get()

        :param city: Filter by city name
        :type city: str
        :param limit: Limit the number of responses back
        :type limit: int
        :param offset: The offset to start returning resources
        :type offset: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[Addressbook], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["city", "limit", "offset"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'" " to method addressbook_get" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get("city") is not None:  # noqa: E501
            _query_params.append(("city", _params["city"]))

        if _params.get("limit") is not None:  # noqa: E501
            _query_params.append(("limit", _params["limit"]))

        if _params.get("offset") is not None:  # noqa: E501
            _query_params.append(("offset", _params["offset"]))

        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # authentication setting
        _auth_settings = ["bearer_auth"]  # noqa: E501

        _response_types_map = {
            "200": "List[Addressbook]",
        }

        return self.api_client.call_api(
            "/addressbook",
            "GET",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @overload
    async def addressbook_post(
        self,
        create_addressbook: Annotated[
            CreateAddressbook, Field(..., description="The request body for /addressbook")
        ],
        limit: Annotated[
            Optional[StrictInt], Field(description="Limit the number of responses back")
        ] = None,
        offset: Annotated[
            Optional[StrictInt], Field(description="The offset to start returning resources")
        ] = None,
        **kwargs,
    ) -> CreateAddressbook:  # noqa: E501
        ...

    @overload
    def addressbook_post(
        self,
        create_addressbook: Annotated[
            CreateAddressbook, Field(..., description="The request body for /addressbook")
        ],
        limit: Annotated[
            Optional[StrictInt], Field(description="Limit the number of responses back")
        ] = None,
        offset: Annotated[
            Optional[StrictInt], Field(description="The offset to start returning resources")
        ] = None,
        async_req: Optional[bool] = True,
        **kwargs,
    ) -> CreateAddressbook:  # noqa: E501
        ...

    @validate_arguments
    def addressbook_post(
        self,
        create_addressbook: Annotated[
            CreateAddressbook, Field(..., description="The request body for /addressbook")
        ],
        limit: Annotated[
            Optional[StrictInt], Field(description="Limit the number of responses back")
        ] = None,
        offset: Annotated[
            Optional[StrictInt], Field(description="The offset to start returning resources")
        ] = None,
        async_req: Optional[bool] = None,
        **kwargs,
    ) -> Union[CreateAddressbook, Awaitable[CreateAddressbook]]:  # noqa: E501
        """addressbook_post  # noqa: E501

        Create a new address in this addressbook, a new address key will be created.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.addressbook_post(create_addressbook, limit, offset, async_req=True)
        >>> result = thread.get()

        :param create_addressbook: The request body for /addressbook (required)
        :type create_addressbook: CreateAddressbook
        :param limit: Limit the number of responses back
        :type limit: int
        :param offset: The offset to start returning resources
        :type offset: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: CreateAddressbook
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            raise ValueError(
                "Error! Please call the addressbook_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            )
        if async_req is not None:
            kwargs["async_req"] = async_req
        return self.addressbook_post_with_http_info(
            create_addressbook, limit, offset, **kwargs
        )  # noqa: E501

    @validate_arguments
    def addressbook_post_with_http_info(
        self,
        create_addressbook: Annotated[
            CreateAddressbook, Field(..., description="The request body for /addressbook")
        ],
        limit: Annotated[
            Optional[StrictInt], Field(description="Limit the number of responses back")
        ] = None,
        offset: Annotated[
            Optional[StrictInt], Field(description="The offset to start returning resources")
        ] = None,
        **kwargs,
    ) -> ApiResponse:  # noqa: E501
        """addressbook_post  # noqa: E501

        Create a new address in this addressbook, a new address key will be created.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.addressbook_post_with_http_info(create_addressbook, limit, offset, async_req=True)
        >>> result = thread.get()

        :param create_addressbook: The request body for /addressbook (required)
        :type create_addressbook: CreateAddressbook
        :param limit: Limit the number of responses back
        :type limit: int
        :param offset: The offset to start returning resources
        :type offset: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(CreateAddressbook, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["create_addressbook", "limit", "offset"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'" " to method addressbook_post" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get("limit") is not None:  # noqa: E501
            _query_params.append(("limit", _params["limit"]))

        if _params.get("offset") is not None:  # noqa: E501
            _query_params.append(("offset", _params["offset"]))

        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params["create_addressbook"] is not None:
            _body_params = _params["create_addressbook"]

        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get(
            "_content_type", self.api_client.select_header_content_type(["application/json"])
        )
        if _content_types_list:
            _header_params["Content-Type"] = _content_types_list

        # authentication setting
        _auth_settings = ["bearer_auth"]  # noqa: E501

        _response_types_map = {
            "201": "CreateAddressbook",
        }

        return self.api_client.call_api(
            "/addressbook",
            "POST",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )
