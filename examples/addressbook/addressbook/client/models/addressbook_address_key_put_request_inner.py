# coding: utf-8

"""
    Example person and addressbook API

    Example person and addressbook API  # noqa: E501

    The version of the OpenAPI document: 1.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Any, List, Optional
from pydantic import BaseModel, Field, StrictStr, validator


class AddressbookAddressKeyPutRequestInner(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    addrtype: StrictStr = Field(..., description="The address type, e.g. work or home")
    city: StrictStr = Field(..., description="The city of this address")
    country: StrictStr = Field(..., description="The country of this address")
    people: Optional[List[StrictStr]] = Field(
        None, description="A list of people's names living there"
    )
    person: Optional[Any] = Field(
        None, description="This is a person object that lives at this address."
    )
    state: StrictStr = Field(..., description="The state of this address")
    street: StrictStr = Field(..., description="The street and civic number of this address")
    __properties = ["addrtype", "city", "country", "people", "person", "state", "street"]

    @validator("addrtype")
    def addrtype_validate_enum(cls, v):
        if v not in ("work", "home"):
            raise ValueError("must validate the enum values ('work', 'home')")
        return v

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> AddressbookAddressKeyPutRequestInner:
        """Create an instance of AddressbookAddressKeyPutRequestInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # set to None if person (nullable) is None
        if self.person is None:
            _dict["person"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> AddressbookAddressKeyPutRequestInner:
        """Create an instance of AddressbookAddressKeyPutRequestInner from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return AddressbookAddressKeyPutRequestInner.parse_obj(obj)

        _obj = AddressbookAddressKeyPutRequestInner.parse_obj(
            {
                "addrtype": obj.get("addrtype"),
                "city": obj.get("city"),
                "country": obj.get("country"),
                "people": obj.get("people"),
                "person": obj.get("person"),
                "state": obj.get("state"),
                "street": obj.get("street"),
            }
        )
        return _obj
