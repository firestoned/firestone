# coding: utf-8

"""
    Example person and addressbook API

    Example person and addressbook API  # noqa: E501

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist, validator
from addressbook.client.models.person import Person


class UpdateAddressbook(BaseModel):
    """
    UpdateAddressbook
    """

    addrtype: Optional[StrictStr] = Field(None, description="The address type, e.g. work or home")
    city: Optional[StrictStr] = Field(None, description="The city of this address")
    country: Optional[StrictStr] = Field(None, description="The country of this address")
    people: Optional[conlist(StrictStr)] = Field(
        None, description="A list of people's names living there"
    )
    person: Optional[Person] = None
    state: Optional[StrictStr] = Field(None, description="The state of this address")
    street: Optional[StrictStr] = Field(
        None, description="The street and civic number of this address"
    )
    __properties = ["addrtype", "city", "country", "people", "person", "state", "street"]

    @validator("addrtype")
    def addrtype_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ("work", "home"):
            raise ValueError("must be one of enum values ('work', 'home')")
        return value

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> UpdateAddressbook:
        """Create an instance of UpdateAddressbook from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of person
        if self.person:
            _dict["person"] = self.person.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> UpdateAddressbook:
        """Create an instance of UpdateAddressbook from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return UpdateAddressbook.parse_obj(obj)

        _obj = UpdateAddressbook.parse_obj(
            {
                "addrtype": obj.get("addrtype"),
                "city": obj.get("city"),
                "country": obj.get("country"),
                "people": obj.get("people"),
                "person": Person.from_dict(obj.get("person"))
                if obj.get("person") is not None
                else None,
                "state": obj.get("state"),
                "street": obj.get("street"),
            }
        )
        return _obj
