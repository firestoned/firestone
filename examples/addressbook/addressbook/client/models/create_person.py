# coding: utf-8

"""
    Example person and addressbook API

    Example person and addressbook API  # noqa: E501

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr, conlist


class CreatePerson(BaseModel):
    """
    CreatePerson
    """

    age: Optional[StrictInt] = Field(None, description="The person's age")
    first_name: Optional[StrictStr] = Field(None, description="The person's first name")
    hobbies: Optional[conlist(StrictStr)] = Field(None, description="The person's hobbies")
    last_name: Optional[StrictStr] = Field(None, description="The person's last name")
    __properties = ["age", "first_name", "hobbies", "last_name"]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CreatePerson:
        """Create an instance of CreatePerson from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CreatePerson:
        """Create an instance of CreatePerson from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CreatePerson.parse_obj(obj)

        _obj = CreatePerson.parse_obj(
            {
                "age": obj.get("age"),
                "first_name": obj.get("first_name"),
                "hobbies": obj.get("hobbies"),
                "last_name": obj.get("last_name"),
            }
        )
        return _obj
